
SSD_App3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000cf4  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00000d96  2**0
                  ALLOC
  3 .stab         00001260  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d13  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
  8a:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enumSetPinDirection>:
 * return : its status
 */


DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8a 83       	std	Y+2, r24	; 0x02
  a8:	6b 83       	std	Y+3, r22	; 0x03
  aa:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 83       	std	Y+1, r24	; 0x01
	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
  b0:	8a 81       	ldd	r24, Y+2	; 0x02
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_enumSetPinDirection+0x26>
  b6:	f1 c0       	rjmp	.+482    	; 0x29a <DIO_enumSetPinDirection+0x208>
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	88 30       	cpi	r24, 0x08	; 8
  bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_enumSetPinDirection+0x2e>
  be:	ed c0       	rjmp	.+474    	; 0x29a <DIO_enumSetPinDirection+0x208>
	{
		//Check on the Pin Direction
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
  c0:	8c 81       	ldd	r24, Y+4	; 0x04
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_enumSetPinDirection+0x36>
  c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_enumSetPinDirection+0x114>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	38 87       	std	Y+8, r19	; 0x08
  d0:	2f 83       	std	Y+7, r18	; 0x07
  d2:	8f 81       	ldd	r24, Y+7	; 0x07
  d4:	98 85       	ldd	r25, Y+8	; 0x08
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	91 05       	cpc	r25, r1
  da:	49 f1       	breq	.+82     	; 0x12e <DIO_enumSetPinDirection+0x9c>
  dc:	2f 81       	ldd	r18, Y+7	; 0x07
  de:	38 85       	ldd	r19, Y+8	; 0x08
  e0:	22 30       	cpi	r18, 0x02	; 2
  e2:	31 05       	cpc	r19, r1
  e4:	2c f4       	brge	.+10     	; 0xf0 <DIO_enumSetPinDirection+0x5e>
  e6:	8f 81       	ldd	r24, Y+7	; 0x07
  e8:	98 85       	ldd	r25, Y+8	; 0x08
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	61 f0       	breq	.+24     	; 0x106 <DIO_enumSetPinDirection+0x74>
  ee:	d6 c0       	rjmp	.+428    	; 0x29c <DIO_enumSetPinDirection+0x20a>
  f0:	2f 81       	ldd	r18, Y+7	; 0x07
  f2:	38 85       	ldd	r19, Y+8	; 0x08
  f4:	22 30       	cpi	r18, 0x02	; 2
  f6:	31 05       	cpc	r19, r1
  f8:	71 f1       	breq	.+92     	; 0x156 <DIO_enumSetPinDirection+0xc4>
  fa:	8f 81       	ldd	r24, Y+7	; 0x07
  fc:	98 85       	ldd	r25, Y+8	; 0x08
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	91 05       	cpc	r25, r1
 102:	e9 f1       	breq	.+122    	; 0x17e <DIO_enumSetPinDirection+0xec>
 104:	cb c0       	rjmp	.+406    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8PIN);break;
 106:	aa e3       	ldi	r26, 0x3A	; 58
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e3       	ldi	r30, 0x3A	; 58
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	48 2f       	mov	r20, r24
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 2e       	mov	r0, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_enumSetPinDirection+0x92>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_enumSetPinDirection+0x8e>
 128:	84 2b       	or	r24, r20
 12a:	8c 93       	st	X, r24
 12c:	b7 c0       	rjmp	.+366    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8PIN);break;
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enumSetPinDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enumSetPinDirection+0xb6>
 150:	84 2b       	or	r24, r20
 152:	8c 93       	st	X, r24
 154:	a3 c0       	rjmp	.+326    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8PIN);break;
 156:	a4 e3       	ldi	r26, 0x34	; 52
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e4 e3       	ldi	r30, 0x34	; 52
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 2e       	mov	r0, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_enumSetPinDirection+0xe2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_enumSetPinDirection+0xde>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
 17c:	8f c0       	rjmp	.+286    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8PIN);break;		
 17e:	a1 e3       	ldi	r26, 0x31	; 49
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e1 e3       	ldi	r30, 0x31	; 49
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	48 2f       	mov	r20, r24
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 2e       	mov	r0, r18
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_enumSetPinDirection+0x10a>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_enumSetPinDirection+0x106>
 1a0:	84 2b       	or	r24, r20
 1a2:	8c 93       	st	X, r24
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}
		}
		//Check on the Pin Direction
		else if (Copy_u8Direction == DIO_PIN_INPUT)
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	88 23       	and	r24, r24
 1aa:	09 f0       	breq	.+2      	; 0x1ae <DIO_enumSetPinDirection+0x11c>
 1ac:	74 c0       	rjmp	.+232    	; 0x296 <DIO_enumSetPinDirection+0x204>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	3e 83       	std	Y+6, r19	; 0x06
 1b6:	2d 83       	std	Y+5, r18	; 0x05
 1b8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ba:	9e 81       	ldd	r25, Y+6	; 0x06
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 05       	cpc	r25, r1
 1c0:	59 f1       	breq	.+86     	; 0x218 <DIO_enumSetPinDirection+0x186>
 1c2:	2d 81       	ldd	r18, Y+5	; 0x05
 1c4:	3e 81       	ldd	r19, Y+6	; 0x06
 1c6:	22 30       	cpi	r18, 0x02	; 2
 1c8:	31 05       	cpc	r19, r1
 1ca:	2c f4       	brge	.+10     	; 0x1d6 <DIO_enumSetPinDirection+0x144>
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	69 f0       	breq	.+26     	; 0x1ee <DIO_enumSetPinDirection+0x15c>
 1d4:	63 c0       	rjmp	.+198    	; 0x29c <DIO_enumSetPinDirection+0x20a>
 1d6:	2d 81       	ldd	r18, Y+5	; 0x05
 1d8:	3e 81       	ldd	r19, Y+6	; 0x06
 1da:	22 30       	cpi	r18, 0x02	; 2
 1dc:	31 05       	cpc	r19, r1
 1de:	89 f1       	breq	.+98     	; 0x242 <DIO_enumSetPinDirection+0x1b0>
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_enumSetPinDirection+0x15a>
 1ea:	40 c0       	rjmp	.+128    	; 0x26c <DIO_enumSetPinDirection+0x1da>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PIN);break;
 1ee:	aa e3       	ldi	r26, 0x3A	; 58
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	ea e3       	ldi	r30, 0x3A	; 58
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_enumSetPinDirection+0x17a>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_enumSetPinDirection+0x176>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	42 c0       	rjmp	.+132    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PIN);break;
 218:	a7 e3       	ldi	r26, 0x37	; 55
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e7 e3       	ldi	r30, 0x37	; 55
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_enumSetPinDirection+0x1a4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_enumSetPinDirection+0x1a0>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	2d c0       	rjmp	.+90     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PIN);break;
 242:	a4 e3       	ldi	r26, 0x34	; 52
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_enumSetPinDirection+0x1ce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_enumSetPinDirection+0x1ca>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
 26a:	18 c0       	rjmp	.+48     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PIN);break;		
 26c:	a1 e3       	ldi	r26, 0x31	; 49
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e1 e3       	ldi	r30, 0x31	; 49
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	48 2f       	mov	r20, r24
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 2e       	mov	r0, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enumSetPinDirection+0x1f8>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enumSetPinDirection+0x1f4>
 28e:	80 95       	com	r24
 290:	84 23       	and	r24, r20
 292:	8c 93       	st	X, r24
 294:	03 c0       	rjmp	.+6      	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}
		}	
		else
		{
			//in case of error in the Pin ID or PORT ID
			LOC_enumState = DIO_NOK ;
 296:	19 82       	std	Y+1, r1	; 0x01
 298:	01 c0       	rjmp	.+2      	; 0x29c <DIO_enumSetPinDirection+0x20a>
		
	}
	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
 29a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
 29c:	89 81       	ldd	r24, Y+1	; 0x01

}
 29e:	28 96       	adiw	r28, 0x08	; 8
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
 2aa:	cf 91       	pop	r28
 2ac:	df 91       	pop	r29
 2ae:	08 95       	ret

000002b0 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
 2b0:	df 93       	push	r29
 2b2:	cf 93       	push	r28
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	28 97       	sbiw	r28, 0x08	; 8
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	8a 83       	std	Y+2, r24	; 0x02
 2c6:	6b 83       	std	Y+3, r22	; 0x03
 2c8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	89 83       	std	Y+1, r24	; 0x01

	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enumSetPinValue+0x26>
 2d4:	f1 c0       	rjmp	.+482    	; 0x4b8 <DIO_enumSetPinValue+0x208>
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	88 30       	cpi	r24, 0x08	; 8
 2da:	08 f0       	brcs	.+2      	; 0x2de <DIO_enumSetPinValue+0x2e>
 2dc:	ed c0       	rjmp	.+474    	; 0x4b8 <DIO_enumSetPinValue+0x208>
	{
		//Check on the Pin Option Value
		if (Copy_u8Value == DIO_PIN_HIGH)
 2de:	8c 81       	ldd	r24, Y+4	; 0x04
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_enumSetPinValue+0x36>
 2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <DIO_enumSetPinValue+0x114>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
 2e6:	8a 81       	ldd	r24, Y+2	; 0x02
 2e8:	28 2f       	mov	r18, r24
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	38 87       	std	Y+8, r19	; 0x08
 2ee:	2f 83       	std	Y+7, r18	; 0x07
 2f0:	8f 81       	ldd	r24, Y+7	; 0x07
 2f2:	98 85       	ldd	r25, Y+8	; 0x08
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	91 05       	cpc	r25, r1
 2f8:	49 f1       	breq	.+82     	; 0x34c <DIO_enumSetPinValue+0x9c>
 2fa:	2f 81       	ldd	r18, Y+7	; 0x07
 2fc:	38 85       	ldd	r19, Y+8	; 0x08
 2fe:	22 30       	cpi	r18, 0x02	; 2
 300:	31 05       	cpc	r19, r1
 302:	2c f4       	brge	.+10     	; 0x30e <DIO_enumSetPinValue+0x5e>
 304:	8f 81       	ldd	r24, Y+7	; 0x07
 306:	98 85       	ldd	r25, Y+8	; 0x08
 308:	00 97       	sbiw	r24, 0x00	; 0
 30a:	61 f0       	breq	.+24     	; 0x324 <DIO_enumSetPinValue+0x74>
 30c:	d6 c0       	rjmp	.+428    	; 0x4ba <DIO_enumSetPinValue+0x20a>
 30e:	2f 81       	ldd	r18, Y+7	; 0x07
 310:	38 85       	ldd	r19, Y+8	; 0x08
 312:	22 30       	cpi	r18, 0x02	; 2
 314:	31 05       	cpc	r19, r1
 316:	71 f1       	breq	.+92     	; 0x374 <DIO_enumSetPinValue+0xc4>
 318:	8f 81       	ldd	r24, Y+7	; 0x07
 31a:	98 85       	ldd	r25, Y+8	; 0x08
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	91 05       	cpc	r25, r1
 320:	e9 f1       	breq	.+122    	; 0x39c <DIO_enumSetPinValue+0xec>
 322:	cb c0       	rjmp	.+406    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8PIN);break;
 324:	ab e3       	ldi	r26, 0x3B	; 59
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	eb e3       	ldi	r30, 0x3B	; 59
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_enumSetPinValue+0x92>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_enumSetPinValue+0x8e>
 346:	84 2b       	or	r24, r20
 348:	8c 93       	st	X, r24
 34a:	b7 c0       	rjmp	.+366    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8PIN);break;
 34c:	a8 e3       	ldi	r26, 0x38	; 56
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	e8 e3       	ldi	r30, 0x38	; 56
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	48 2f       	mov	r20, r24
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	28 2f       	mov	r18, r24
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 2e       	mov	r0, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_enumSetPinValue+0xba>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	0a 94       	dec	r0
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_enumSetPinValue+0xb6>
 36e:	84 2b       	or	r24, r20
 370:	8c 93       	st	X, r24
 372:	a3 c0       	rjmp	.+326    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8PIN);break;
 374:	a5 e3       	ldi	r26, 0x35	; 53
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	e5 e3       	ldi	r30, 0x35	; 53
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	8b 81       	ldd	r24, Y+3	; 0x03
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_enumSetPinValue+0xe2>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_enumSetPinValue+0xde>
 396:	84 2b       	or	r24, r20
 398:	8c 93       	st	X, r24
 39a:	8f c0       	rjmp	.+286    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8PIN);break;		
 39c:	a2 e3       	ldi	r26, 0x32	; 50
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e2 e3       	ldi	r30, 0x32	; 50
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_enumSetPinValue+0x10a>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_enumSetPinValue+0x106>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	7b c0       	rjmp	.+246    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}
		}
		//Check on the Pin Option Value
		else if (Copy_u8Value == DIO_PIN_LOW)
 3c4:	8c 81       	ldd	r24, Y+4	; 0x04
 3c6:	88 23       	and	r24, r24
 3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_enumSetPinValue+0x11c>
 3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <DIO_enumSetPinValue+0x204>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	3e 83       	std	Y+6, r19	; 0x06
 3d4:	2d 83       	std	Y+5, r18	; 0x05
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 05       	cpc	r25, r1
 3de:	59 f1       	breq	.+86     	; 0x436 <DIO_enumSetPinValue+0x186>
 3e0:	2d 81       	ldd	r18, Y+5	; 0x05
 3e2:	3e 81       	ldd	r19, Y+6	; 0x06
 3e4:	22 30       	cpi	r18, 0x02	; 2
 3e6:	31 05       	cpc	r19, r1
 3e8:	2c f4       	brge	.+10     	; 0x3f4 <DIO_enumSetPinValue+0x144>
 3ea:	8d 81       	ldd	r24, Y+5	; 0x05
 3ec:	9e 81       	ldd	r25, Y+6	; 0x06
 3ee:	00 97       	sbiw	r24, 0x00	; 0
 3f0:	69 f0       	breq	.+26     	; 0x40c <DIO_enumSetPinValue+0x15c>
 3f2:	63 c0       	rjmp	.+198    	; 0x4ba <DIO_enumSetPinValue+0x20a>
 3f4:	2d 81       	ldd	r18, Y+5	; 0x05
 3f6:	3e 81       	ldd	r19, Y+6	; 0x06
 3f8:	22 30       	cpi	r18, 0x02	; 2
 3fa:	31 05       	cpc	r19, r1
 3fc:	89 f1       	breq	.+98     	; 0x460 <DIO_enumSetPinValue+0x1b0>
 3fe:	8d 81       	ldd	r24, Y+5	; 0x05
 400:	9e 81       	ldd	r25, Y+6	; 0x06
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	91 05       	cpc	r25, r1
 406:	09 f4       	brne	.+2      	; 0x40a <DIO_enumSetPinValue+0x15a>
 408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_enumSetPinValue+0x1da>
 40a:	57 c0       	rjmp	.+174    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PIN);break;
 40c:	ab e3       	ldi	r26, 0x3B	; 59
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	eb e3       	ldi	r30, 0x3B	; 59
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	48 2f       	mov	r20, r24
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	28 2f       	mov	r18, r24
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 2e       	mov	r0, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_enumSetPinValue+0x17a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	0a 94       	dec	r0
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_enumSetPinValue+0x176>
 42e:	80 95       	com	r24
 430:	84 23       	and	r24, r20
 432:	8c 93       	st	X, r24
 434:	42 c0       	rjmp	.+132    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PIN);break;
 436:	a8 e3       	ldi	r26, 0x38	; 56
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e8 e3       	ldi	r30, 0x38	; 56
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 2e       	mov	r0, r18
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_enumSetPinValue+0x1a4>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_enumSetPinValue+0x1a0>
 458:	80 95       	com	r24
 45a:	84 23       	and	r24, r20
 45c:	8c 93       	st	X, r24
 45e:	2d c0       	rjmp	.+90     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PIN);break;
 460:	a5 e3       	ldi	r26, 0x35	; 53
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e5 e3       	ldi	r30, 0x35	; 53
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_enumSetPinValue+0x1ce>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_enumSetPinValue+0x1ca>
 482:	80 95       	com	r24
 484:	84 23       	and	r24, r20
 486:	8c 93       	st	X, r24
 488:	18 c0       	rjmp	.+48     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PIN);break;		
 48a:	a2 e3       	ldi	r26, 0x32	; 50
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	e2 e3       	ldi	r30, 0x32	; 50
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	48 2f       	mov	r20, r24
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_enumSetPinValue+0x1f8>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_enumSetPinValue+0x1f4>
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	8c 93       	st	X, r24
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}
		}
		else
			{
				//in case of error in the Pin ID or PORT ID
				LOC_enumState = DIO_NOK ;
 4b4:	19 82       	std	Y+1, r1	; 0x01
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <DIO_enumSetPinValue+0x20a>
	}

	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
 4b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
 4ba:	89 81       	ldd	r24, Y+1	; 0x01

}
 4bc:	28 96       	adiw	r28, 0x08	; 8
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	08 95       	ret

000004ce <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
 4ce:	df 93       	push	r29
 4d0:	cf 93       	push	r28
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	27 97       	sbiw	r28, 0x07	; 7
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	8a 83       	std	Y+2, r24	; 0x02
 4e4:	6b 83       	std	Y+3, r22	; 0x03
 4e6:	5d 83       	std	Y+5, r21	; 0x05
 4e8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	89 83       	std	Y+1, r24	; 0x01
    //Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <DIO_enumGetPinValue+0x28>
 4f4:	a2 c0       	rjmp	.+324    	; 0x63a <DIO_enumGetPinValue+0x16c>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	08 f0       	brcs	.+2      	; 0x4fe <DIO_enumGetPinValue+0x30>
 4fc:	9e c0       	rjmp	.+316    	; 0x63a <DIO_enumGetPinValue+0x16c>
	{
		//Check on the Required PORT Number
		switch (Copy_u8PORT)
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	3f 83       	std	Y+7, r19	; 0x07
 506:	2e 83       	std	Y+6, r18	; 0x06
 508:	6e 81       	ldd	r22, Y+6	; 0x06
 50a:	7f 81       	ldd	r23, Y+7	; 0x07
 50c:	61 30       	cpi	r22, 0x01	; 1
 50e:	71 05       	cpc	r23, r1
 510:	b9 f1       	breq	.+110    	; 0x580 <DIO_enumGetPinValue+0xb2>
 512:	8e 81       	ldd	r24, Y+6	; 0x06
 514:	9f 81       	ldd	r25, Y+7	; 0x07
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	91 05       	cpc	r25, r1
 51a:	34 f4       	brge	.+12     	; 0x528 <DIO_enumGetPinValue+0x5a>
 51c:	2e 81       	ldd	r18, Y+6	; 0x06
 51e:	3f 81       	ldd	r19, Y+7	; 0x07
 520:	21 15       	cp	r18, r1
 522:	31 05       	cpc	r19, r1
 524:	71 f0       	breq	.+28     	; 0x542 <DIO_enumGetPinValue+0x74>
 526:	8a c0       	rjmp	.+276    	; 0x63c <DIO_enumGetPinValue+0x16e>
 528:	6e 81       	ldd	r22, Y+6	; 0x06
 52a:	7f 81       	ldd	r23, Y+7	; 0x07
 52c:	62 30       	cpi	r22, 0x02	; 2
 52e:	71 05       	cpc	r23, r1
 530:	09 f4       	brne	.+2      	; 0x534 <DIO_enumGetPinValue+0x66>
 532:	45 c0       	rjmp	.+138    	; 0x5be <DIO_enumGetPinValue+0xf0>
 534:	8e 81       	ldd	r24, Y+6	; 0x06
 536:	9f 81       	ldd	r25, Y+7	; 0x07
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	91 05       	cpc	r25, r1
 53c:	09 f4       	brne	.+2      	; 0x540 <DIO_enumGetPinValue+0x72>
 53e:	5e c0       	rjmp	.+188    	; 0x5fc <DIO_enumGetPinValue+0x12e>
 540:	7d c0       	rjmp	.+250    	; 0x63c <DIO_enumGetPinValue+0x16e>
	    {
		case DIO_PORTA : * Copy_PtrData=GET_BIT(PINA,Copy_u8PIN);break;
 542:	e9 e3       	ldi	r30, 0x39	; 57
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	bc 01       	movw	r22, r24
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_enumGetPinValue+0x8e>
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	2a 95       	dec	r18
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_enumGetPinValue+0x8a>
 560:	9b 01       	movw	r18, r22
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	88 2f       	mov	r24, r24
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_enumGetPinValue+0xa2>
 56c:	75 95       	asr	r23
 56e:	67 95       	ror	r22
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_enumGetPinValue+0x9e>
 574:	cb 01       	movw	r24, r22
 576:	84 23       	and	r24, r20
 578:	ec 81       	ldd	r30, Y+4	; 0x04
 57a:	fd 81       	ldd	r31, Y+5	; 0x05
 57c:	80 83       	st	Z, r24
 57e:	5e c0       	rjmp	.+188    	; 0x63c <DIO_enumGetPinValue+0x16e>
		case DIO_PORTB : * Copy_PtrData=GET_BIT(PINB,Copy_u8PIN);break;
 580:	e6 e3       	ldi	r30, 0x36	; 54
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	48 2f       	mov	r20, r24
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	28 2f       	mov	r18, r24
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	bc 01       	movw	r22, r24
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_enumGetPinValue+0xcc>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	2a 95       	dec	r18
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_enumGetPinValue+0xc8>
 59e:	9b 01       	movw	r18, r22
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_enumGetPinValue+0xe0>
 5aa:	75 95       	asr	r23
 5ac:	67 95       	ror	r22
 5ae:	8a 95       	dec	r24
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_enumGetPinValue+0xdc>
 5b2:	cb 01       	movw	r24, r22
 5b4:	84 23       	and	r24, r20
 5b6:	ec 81       	ldd	r30, Y+4	; 0x04
 5b8:	fd 81       	ldd	r31, Y+5	; 0x05
 5ba:	80 83       	st	Z, r24
 5bc:	3f c0       	rjmp	.+126    	; 0x63c <DIO_enumGetPinValue+0x16e>
		case DIO_PORTC : * Copy_PtrData=GET_BIT(PINC,Copy_u8PIN);break;
 5be:	e3 e3       	ldi	r30, 0x33	; 51
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	48 2f       	mov	r20, r24
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	bc 01       	movw	r22, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_enumGetPinValue+0x10a>
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	2a 95       	dec	r18
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_enumGetPinValue+0x106>
 5dc:	9b 01       	movw	r18, r22
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	88 2f       	mov	r24, r24
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_enumGetPinValue+0x11e>
 5e8:	75 95       	asr	r23
 5ea:	67 95       	ror	r22
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_enumGetPinValue+0x11a>
 5f0:	cb 01       	movw	r24, r22
 5f2:	84 23       	and	r24, r20
 5f4:	ec 81       	ldd	r30, Y+4	; 0x04
 5f6:	fd 81       	ldd	r31, Y+5	; 0x05
 5f8:	80 83       	st	Z, r24
 5fa:	20 c0       	rjmp	.+64     	; 0x63c <DIO_enumGetPinValue+0x16e>
		case DIO_PORTD : * Copy_PtrData=GET_BIT(PIND,Copy_u8PIN);break;		
 5fc:	e0 e3       	ldi	r30, 0x30	; 48
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	bc 01       	movw	r22, r24
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_enumGetPinValue+0x148>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	2a 95       	dec	r18
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_enumGetPinValue+0x144>
 61a:	9b 01       	movw	r18, r22
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	b9 01       	movw	r22, r18
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_enumGetPinValue+0x15c>
 626:	75 95       	asr	r23
 628:	67 95       	ror	r22
 62a:	8a 95       	dec	r24
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_enumGetPinValue+0x158>
 62e:	cb 01       	movw	r24, r22
 630:	84 23       	and	r24, r20
 632:	ec 81       	ldd	r30, Y+4	; 0x04
 634:	fd 81       	ldd	r31, Y+5	; 0x05
 636:	80 83       	st	Z, r24
 638:	01 c0       	rjmp	.+2      	; 0x63c <DIO_enumGetPinValue+0x16e>
		}
	}
	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
 63a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;	
 63c:	89 81       	ldd	r24, Y+1	; 0x01
}
 63e:	27 96       	adiw	r28, 0x07	; 7
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	cf 91       	pop	r28
 64c:	df 91       	pop	r29
 64e:	08 95       	ret

00000650 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
 650:	df 93       	push	r29
 652:	cf 93       	push	r28
 654:	00 d0       	rcall	.+0      	; 0x656 <DIO_enumTogglePinValue+0x6>
 656:	00 d0       	rcall	.+0      	; 0x658 <DIO_enumTogglePinValue+0x8>
 658:	0f 92       	push	r0
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	8a 83       	std	Y+2, r24	; 0x02
 660:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	89 83       	std	Y+1, r24	; 0x01

	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	84 30       	cpi	r24, 0x04	; 4
 66a:	08 f0       	brcs	.+2      	; 0x66e <DIO_enumTogglePinValue+0x1e>
 66c:	73 c0       	rjmp	.+230    	; 0x754 <DIO_enumTogglePinValue+0x104>
 66e:	8b 81       	ldd	r24, Y+3	; 0x03
 670:	88 30       	cpi	r24, 0x08	; 8
 672:	08 f0       	brcs	.+2      	; 0x676 <DIO_enumTogglePinValue+0x26>
 674:	6f c0       	rjmp	.+222    	; 0x754 <DIO_enumTogglePinValue+0x104>
	{
		//Check on the Required PORT Number
		switch (Copy_u8PORT)
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	28 2f       	mov	r18, r24
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	3d 83       	std	Y+5, r19	; 0x05
 67e:	2c 83       	std	Y+4, r18	; 0x04
 680:	8c 81       	ldd	r24, Y+4	; 0x04
 682:	9d 81       	ldd	r25, Y+5	; 0x05
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	91 05       	cpc	r25, r1
 688:	49 f1       	breq	.+82     	; 0x6dc <DIO_enumTogglePinValue+0x8c>
 68a:	2c 81       	ldd	r18, Y+4	; 0x04
 68c:	3d 81       	ldd	r19, Y+5	; 0x05
 68e:	22 30       	cpi	r18, 0x02	; 2
 690:	31 05       	cpc	r19, r1
 692:	2c f4       	brge	.+10     	; 0x69e <DIO_enumTogglePinValue+0x4e>
 694:	8c 81       	ldd	r24, Y+4	; 0x04
 696:	9d 81       	ldd	r25, Y+5	; 0x05
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	61 f0       	breq	.+24     	; 0x6b4 <DIO_enumTogglePinValue+0x64>
 69c:	5c c0       	rjmp	.+184    	; 0x756 <DIO_enumTogglePinValue+0x106>
 69e:	2c 81       	ldd	r18, Y+4	; 0x04
 6a0:	3d 81       	ldd	r19, Y+5	; 0x05
 6a2:	22 30       	cpi	r18, 0x02	; 2
 6a4:	31 05       	cpc	r19, r1
 6a6:	71 f1       	breq	.+92     	; 0x704 <DIO_enumTogglePinValue+0xb4>
 6a8:	8c 81       	ldd	r24, Y+4	; 0x04
 6aa:	9d 81       	ldd	r25, Y+5	; 0x05
 6ac:	83 30       	cpi	r24, 0x03	; 3
 6ae:	91 05       	cpc	r25, r1
 6b0:	e9 f1       	breq	.+122    	; 0x72c <DIO_enumTogglePinValue+0xdc>
 6b2:	51 c0       	rjmp	.+162    	; 0x756 <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA : TOG_BIT(PORTA,Copy_u8PIN);
 6b4:	ab e3       	ldi	r26, 0x3B	; 59
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	eb e3       	ldi	r30, 0x3B	; 59
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	48 2f       	mov	r20, r24
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	28 2f       	mov	r18, r24
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	02 2e       	mov	r0, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_enumTogglePinValue+0x82>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	0a 94       	dec	r0
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_enumTogglePinValue+0x7e>
 6d6:	84 27       	eor	r24, r20
 6d8:	8c 93       	st	X, r24
 6da:	3d c0       	rjmp	.+122    	; 0x756 <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB,Copy_u8PIN);
 6dc:	a8 e3       	ldi	r26, 0x38	; 56
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	e8 e3       	ldi	r30, 0x38	; 56
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	48 2f       	mov	r20, r24
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	28 2f       	mov	r18, r24
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 2e       	mov	r0, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_enumTogglePinValue+0xaa>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	0a 94       	dec	r0
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_enumTogglePinValue+0xa6>
 6fe:	84 27       	eor	r24, r20
 700:	8c 93       	st	X, r24
 702:	29 c0       	rjmp	.+82     	; 0x756 <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC,Copy_u8PIN);
 704:	a5 e3       	ldi	r26, 0x35	; 53
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e5 e3       	ldi	r30, 0x35	; 53
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	48 2f       	mov	r20, r24
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 2e       	mov	r0, r18
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_enumTogglePinValue+0xd2>
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_enumTogglePinValue+0xce>
 726:	84 27       	eor	r24, r20
 728:	8c 93       	st	X, r24
 72a:	15 c0       	rjmp	.+42     	; 0x756 <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD,Copy_u8PIN);
 72c:	a2 e3       	ldi	r26, 0x32	; 50
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	e2 e3       	ldi	r30, 0x32	; 50
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	48 2f       	mov	r20, r24
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 2e       	mov	r0, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_enumTogglePinValue+0xfa>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_enumTogglePinValue+0xf6>
 74e:	84 27       	eor	r24, r20
 750:	8c 93       	st	X, r24
 752:	01 c0       	rjmp	.+2      	; 0x756 <DIO_enumTogglePinValue+0x106>

	}
	else
	{
		//in case of error in the Pin ID or PORT ID 
		LOC_enumState = DIO_NOK ;
 754:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
 756:	89 81       	ldd	r24, Y+1	; 0x01
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	cf 91       	pop	r28
 764:	df 91       	pop	r29
 766:	08 95       	ret

00000768 <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection  (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
 768:	df 93       	push	r29
 76a:	cf 93       	push	r28
 76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_enumSetPortDirection+0x6>
 76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_enumSetPortDirection+0x8>
 770:	0f 92       	push	r0
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	8a 83       	std	Y+2, r24	; 0x02
 778:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	89 83       	std	Y+1, r24	; 0x01
    
	//Make sure that the Port ID is in the valid range
	if ( (Copy_u8PORT <= DIO_PORTD) )
 77e:	8a 81       	ldd	r24, Y+2	; 0x02
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	a8 f5       	brcc	.+106    	; 0x7ee <DIO_enumSetPortDirection+0x86>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
 784:	8a 81       	ldd	r24, Y+2	; 0x02
 786:	28 2f       	mov	r18, r24
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	3d 83       	std	Y+5, r19	; 0x05
 78c:	2c 83       	std	Y+4, r18	; 0x04
 78e:	8c 81       	ldd	r24, Y+4	; 0x04
 790:	9d 81       	ldd	r25, Y+5	; 0x05
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	91 05       	cpc	r25, r1
 796:	d1 f0       	breq	.+52     	; 0x7cc <DIO_enumSetPortDirection+0x64>
 798:	2c 81       	ldd	r18, Y+4	; 0x04
 79a:	3d 81       	ldd	r19, Y+5	; 0x05
 79c:	22 30       	cpi	r18, 0x02	; 2
 79e:	31 05       	cpc	r19, r1
 7a0:	2c f4       	brge	.+10     	; 0x7ac <DIO_enumSetPortDirection+0x44>
 7a2:	8c 81       	ldd	r24, Y+4	; 0x04
 7a4:	9d 81       	ldd	r25, Y+5	; 0x05
 7a6:	00 97       	sbiw	r24, 0x00	; 0
 7a8:	61 f0       	breq	.+24     	; 0x7c2 <DIO_enumSetPortDirection+0x5a>
 7aa:	1f c0       	rjmp	.+62     	; 0x7ea <DIO_enumSetPortDirection+0x82>
 7ac:	2c 81       	ldd	r18, Y+4	; 0x04
 7ae:	3d 81       	ldd	r19, Y+5	; 0x05
 7b0:	22 30       	cpi	r18, 0x02	; 2
 7b2:	31 05       	cpc	r19, r1
 7b4:	81 f0       	breq	.+32     	; 0x7d6 <DIO_enumSetPortDirection+0x6e>
 7b6:	8c 81       	ldd	r24, Y+4	; 0x04
 7b8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ba:	83 30       	cpi	r24, 0x03	; 3
 7bc:	91 05       	cpc	r25, r1
 7be:	81 f0       	breq	.+32     	; 0x7e0 <DIO_enumSetPortDirection+0x78>
 7c0:	14 c0       	rjmp	.+40     	; 0x7ea <DIO_enumSetPortDirection+0x82>
		{
		case DIO_PORTA: DDRA = Copy_u8Direction; break;
 7c2:	ea e3       	ldi	r30, 0x3A	; 58
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	80 83       	st	Z, r24
 7ca:	12 c0       	rjmp	.+36     	; 0x7f0 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTB: DDRB = Copy_u8Direction; break;
 7cc:	e7 e3       	ldi	r30, 0x37	; 55
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	8b 81       	ldd	r24, Y+3	; 0x03
 7d2:	80 83       	st	Z, r24
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTC: DDRC = Copy_u8Direction; break;
 7d6:	e4 e3       	ldi	r30, 0x34	; 52
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	8b 81       	ldd	r24, Y+3	; 0x03
 7dc:	80 83       	st	Z, r24
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTD: DDRD = Copy_u8Direction; break;
 7e0:	e1 e3       	ldi	r30, 0x31	; 49
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	80 83       	st	Z, r24
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <DIO_enumSetPortDirection+0x88>
		default       : LOC_enumState = DIO_NOK; break;
 7ea:	19 82       	std	Y+1, r1	; 0x01
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
 7ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f2:	0f 90       	pop	r0
 7f4:	0f 90       	pop	r0
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	cf 91       	pop	r28
 7fe:	df 91       	pop	r29
 800:	08 95       	ret

00000802 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue  (u8 Copy_u8PORT , u8 Copy_u8Value )
{
 802:	df 93       	push	r29
 804:	cf 93       	push	r28
 806:	00 d0       	rcall	.+0      	; 0x808 <DIO_enumSetPortValue+0x6>
 808:	00 d0       	rcall	.+0      	; 0x80a <DIO_enumSetPortValue+0x8>
 80a:	0f 92       	push	r0
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	8a 83       	std	Y+2, r24	; 0x02
 812:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	89 83       	std	Y+1, r24	; 0x01
    
	//Make sure that the Port ID is in the valid range and the Value is Valid
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	84 30       	cpi	r24, 0x04	; 4
 81c:	a8 f5       	brcc	.+106    	; 0x888 <__stack+0x29>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
 81e:	8a 81       	ldd	r24, Y+2	; 0x02
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	3d 83       	std	Y+5, r19	; 0x05
 826:	2c 83       	std	Y+4, r18	; 0x04
 828:	8c 81       	ldd	r24, Y+4	; 0x04
 82a:	9d 81       	ldd	r25, Y+5	; 0x05
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	91 05       	cpc	r25, r1
 830:	d1 f0       	breq	.+52     	; 0x866 <__stack+0x7>
 832:	2c 81       	ldd	r18, Y+4	; 0x04
 834:	3d 81       	ldd	r19, Y+5	; 0x05
 836:	22 30       	cpi	r18, 0x02	; 2
 838:	31 05       	cpc	r19, r1
 83a:	2c f4       	brge	.+10     	; 0x846 <DIO_enumSetPortValue+0x44>
 83c:	8c 81       	ldd	r24, Y+4	; 0x04
 83e:	9d 81       	ldd	r25, Y+5	; 0x05
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	61 f0       	breq	.+24     	; 0x85c <DIO_enumSetPortValue+0x5a>
 844:	1f c0       	rjmp	.+62     	; 0x884 <__stack+0x25>
 846:	2c 81       	ldd	r18, Y+4	; 0x04
 848:	3d 81       	ldd	r19, Y+5	; 0x05
 84a:	22 30       	cpi	r18, 0x02	; 2
 84c:	31 05       	cpc	r19, r1
 84e:	81 f0       	breq	.+32     	; 0x870 <__stack+0x11>
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	9d 81       	ldd	r25, Y+5	; 0x05
 854:	83 30       	cpi	r24, 0x03	; 3
 856:	91 05       	cpc	r25, r1
 858:	81 f0       	breq	.+32     	; 0x87a <__stack+0x1b>
 85a:	14 c0       	rjmp	.+40     	; 0x884 <__stack+0x25>
		{
		case DIO_PORTA: PORTA = Copy_u8Value; break;
 85c:	eb e3       	ldi	r30, 0x3B	; 59
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	8b 81       	ldd	r24, Y+3	; 0x03
 862:	80 83       	st	Z, r24
 864:	12 c0       	rjmp	.+36     	; 0x88a <__stack+0x2b>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
 866:	e8 e3       	ldi	r30, 0x38	; 56
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	80 83       	st	Z, r24
 86e:	0d c0       	rjmp	.+26     	; 0x88a <__stack+0x2b>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
 870:	e5 e3       	ldi	r30, 0x35	; 53
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	80 83       	st	Z, r24
 878:	08 c0       	rjmp	.+16     	; 0x88a <__stack+0x2b>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
 87a:	e2 e3       	ldi	r30, 0x32	; 50
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	80 83       	st	Z, r24
 882:	03 c0       	rjmp	.+6      	; 0x88a <__stack+0x2b>
		default       : LOC_enumState = DIO_NOK; break;
 884:	19 82       	std	Y+1, r1	; 0x01
 886:	01 c0       	rjmp	.+2      	; 0x88a <__stack+0x2b>
		}	
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
 888:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
 88a:	89 81       	ldd	r24, Y+1	; 0x01
}
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue  ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <DIO_enumGetPortValue+0x6>
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <DIO_enumGetPortValue+0x8>
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <DIO_enumGetPortValue+0xa>
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
 8aa:	8a 83       	std	Y+2, r24	; 0x02
 8ac:	7c 83       	std	Y+4, r23	; 0x04
 8ae:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	89 83       	std	Y+1, r24	; 0x01

    //Make sure that the Port ID is in the valid range
	if ( (Copy_u8PORT <= DIO_PORTD))
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	84 30       	cpi	r24, 0x04	; 4
 8b8:	e8 f5       	brcc	.+122    	; 0x934 <DIO_enumGetPortValue+0x98>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
 8ba:	8a 81       	ldd	r24, Y+2	; 0x02
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	3e 83       	std	Y+6, r19	; 0x06
 8c2:	2d 83       	std	Y+5, r18	; 0x05
 8c4:	8d 81       	ldd	r24, Y+5	; 0x05
 8c6:	9e 81       	ldd	r25, Y+6	; 0x06
 8c8:	81 30       	cpi	r24, 0x01	; 1
 8ca:	91 05       	cpc	r25, r1
 8cc:	e1 f0       	breq	.+56     	; 0x906 <DIO_enumGetPortValue+0x6a>
 8ce:	2d 81       	ldd	r18, Y+5	; 0x05
 8d0:	3e 81       	ldd	r19, Y+6	; 0x06
 8d2:	22 30       	cpi	r18, 0x02	; 2
 8d4:	31 05       	cpc	r19, r1
 8d6:	2c f4       	brge	.+10     	; 0x8e2 <DIO_enumGetPortValue+0x46>
 8d8:	8d 81       	ldd	r24, Y+5	; 0x05
 8da:	9e 81       	ldd	r25, Y+6	; 0x06
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	61 f0       	breq	.+24     	; 0x8f8 <DIO_enumGetPortValue+0x5c>
 8e0:	27 c0       	rjmp	.+78     	; 0x930 <DIO_enumGetPortValue+0x94>
 8e2:	2d 81       	ldd	r18, Y+5	; 0x05
 8e4:	3e 81       	ldd	r19, Y+6	; 0x06
 8e6:	22 30       	cpi	r18, 0x02	; 2
 8e8:	31 05       	cpc	r19, r1
 8ea:	a1 f0       	breq	.+40     	; 0x914 <DIO_enumGetPortValue+0x78>
 8ec:	8d 81       	ldd	r24, Y+5	; 0x05
 8ee:	9e 81       	ldd	r25, Y+6	; 0x06
 8f0:	83 30       	cpi	r24, 0x03	; 3
 8f2:	91 05       	cpc	r25, r1
 8f4:	b1 f0       	breq	.+44     	; 0x922 <DIO_enumGetPortValue+0x86>
 8f6:	1c c0       	rjmp	.+56     	; 0x930 <DIO_enumGetPortValue+0x94>
		{
			case DIO_PORTA : *Copy_PtrData = PINA ;break ;
 8f8:	e9 e3       	ldi	r30, 0x39	; 57
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	eb 81       	ldd	r30, Y+3	; 0x03
 900:	fc 81       	ldd	r31, Y+4	; 0x04
 902:	80 83       	st	Z, r24
 904:	18 c0       	rjmp	.+48     	; 0x936 <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTB : *Copy_PtrData = PINB ;break ;
 906:	e6 e3       	ldi	r30, 0x36	; 54
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	eb 81       	ldd	r30, Y+3	; 0x03
 90e:	fc 81       	ldd	r31, Y+4	; 0x04
 910:	80 83       	st	Z, r24
 912:	11 c0       	rjmp	.+34     	; 0x936 <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTC : *Copy_PtrData = PINC ;break ;
 914:	e3 e3       	ldi	r30, 0x33	; 51
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	eb 81       	ldd	r30, Y+3	; 0x03
 91c:	fc 81       	ldd	r31, Y+4	; 0x04
 91e:	80 83       	st	Z, r24
 920:	0a c0       	rjmp	.+20     	; 0x936 <DIO_enumGetPortValue+0x9a>
	        case DIO_PORTD : *Copy_PtrData = PIND ;break ;
 922:	e0 e3       	ldi	r30, 0x30	; 48
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	eb 81       	ldd	r30, Y+3	; 0x03
 92a:	fc 81       	ldd	r31, Y+4	; 0x04
 92c:	80 83       	st	Z, r24
 92e:	03 c0       	rjmp	.+6      	; 0x936 <DIO_enumGetPortValue+0x9a>
		    default        : LOC_enumState = DIO_NOK; break ;
 930:	19 82       	std	Y+1, r1	; 0x01
 932:	01 c0       	rjmp	.+2      	; 0x936 <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
 934:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
 936:	89 81       	ldd	r24, Y+1	; 0x01
}
 938:	26 96       	adiw	r28, 0x06	; 6
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	00 d0       	rcall	.+0      	; 0x950 <DIO_enumTogglePortValue+0x6>
 950:	00 d0       	rcall	.+0      	; 0x952 <DIO_enumTogglePortValue+0x8>
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	89 83       	std	Y+1, r24	; 0x01
	
    //Make sure that the Port ID is in the valid range
	if (Copy_u8PORT <= DIO_PORTD)
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	84 30       	cpi	r24, 0x04	; 4
 960:	08 f0       	brcs	.+2      	; 0x964 <DIO_enumTogglePortValue+0x1a>
 962:	3f c0       	rjmp	.+126    	; 0x9e2 <DIO_enumTogglePortValue+0x98>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
 964:	8a 81       	ldd	r24, Y+2	; 0x02
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	3c 83       	std	Y+4, r19	; 0x04
 96c:	2b 83       	std	Y+3, r18	; 0x03
 96e:	8b 81       	ldd	r24, Y+3	; 0x03
 970:	9c 81       	ldd	r25, Y+4	; 0x04
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	91 05       	cpc	r25, r1
 976:	e9 f0       	breq	.+58     	; 0x9b2 <DIO_enumTogglePortValue+0x68>
 978:	2b 81       	ldd	r18, Y+3	; 0x03
 97a:	3c 81       	ldd	r19, Y+4	; 0x04
 97c:	22 30       	cpi	r18, 0x02	; 2
 97e:	31 05       	cpc	r19, r1
 980:	2c f4       	brge	.+10     	; 0x98c <DIO_enumTogglePortValue+0x42>
 982:	8b 81       	ldd	r24, Y+3	; 0x03
 984:	9c 81       	ldd	r25, Y+4	; 0x04
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	61 f0       	breq	.+24     	; 0x9a2 <DIO_enumTogglePortValue+0x58>
 98a:	2c c0       	rjmp	.+88     	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
 98c:	2b 81       	ldd	r18, Y+3	; 0x03
 98e:	3c 81       	ldd	r19, Y+4	; 0x04
 990:	22 30       	cpi	r18, 0x02	; 2
 992:	31 05       	cpc	r19, r1
 994:	b1 f0       	breq	.+44     	; 0x9c2 <DIO_enumTogglePortValue+0x78>
 996:	8b 81       	ldd	r24, Y+3	; 0x03
 998:	9c 81       	ldd	r25, Y+4	; 0x04
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	91 05       	cpc	r25, r1
 99e:	c9 f0       	breq	.+50     	; 0x9d2 <DIO_enumTogglePortValue+0x88>
 9a0:	21 c0       	rjmp	.+66     	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA = ~PORTA ;break ;
 9a2:	ab e3       	ldi	r26, 0x3B	; 59
 9a4:	b0 e0       	ldi	r27, 0x00	; 0
 9a6:	eb e3       	ldi	r30, 0x3B	; 59
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	80 81       	ld	r24, Z
 9ac:	80 95       	com	r24
 9ae:	8c 93       	st	X, r24
 9b0:	19 c0       	rjmp	.+50     	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTB : PORTB = ~PORTB ;break ;
 9b2:	a8 e3       	ldi	r26, 0x38	; 56
 9b4:	b0 e0       	ldi	r27, 0x00	; 0
 9b6:	e8 e3       	ldi	r30, 0x38	; 56
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	80 81       	ld	r24, Z
 9bc:	80 95       	com	r24
 9be:	8c 93       	st	X, r24
 9c0:	11 c0       	rjmp	.+34     	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTC : PORTC = ~PORTC ;break ;
 9c2:	a5 e3       	ldi	r26, 0x35	; 53
 9c4:	b0 e0       	ldi	r27, 0x00	; 0
 9c6:	e5 e3       	ldi	r30, 0x35	; 53
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	80 81       	ld	r24, Z
 9cc:	80 95       	com	r24
 9ce:	8c 93       	st	X, r24
 9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTD : PORTD = ~PORTD ;break ;
 9d2:	a2 e3       	ldi	r26, 0x32	; 50
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	e2 e3       	ldi	r30, 0x32	; 50
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	80 95       	com	r24
 9de:	8c 93       	st	X, r24
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <DIO_enumTogglePortValue+0x9a>
		}
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
 9e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 9e6:	0f 90       	pop	r0
 9e8:	0f 90       	pop	r0
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	cf 91       	pop	r28
 9f0:	df 91       	pop	r29
 9f2:	08 95       	ret

000009f4 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
 9f4:	df 93       	push	r29
 9f6:	cf 93       	push	r28
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <SSD_voidInitialDataPort+0x6>
 9fa:	00 d0       	rcall	.+0      	; 0x9fc <SSD_voidInitialDataPort+0x8>
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	69 83       	std	Y+1, r22	; 0x01
 a02:	7a 83       	std	Y+2, r23	; 0x02
 a04:	8b 83       	std	Y+3, r24	; 0x03
 a06:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
 a08:	8a 81       	ldd	r24, Y+2	; 0x02
 a0a:	6f ef       	ldi	r22, 0xFF	; 255
 a0c:	0e 94 b4 03 	call	0x768	; 0x768 <DIO_enumSetPortDirection>
}
 a10:	0f 90       	pop	r0
 a12:	0f 90       	pop	r0
 a14:	0f 90       	pop	r0
 a16:	0f 90       	pop	r0
 a18:	cf 91       	pop	r28
 a1a:	df 91       	pop	r29
 a1c:	08 95       	ret

00000a1e <SSD_voidSendNumber>:
/*
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){
 a1e:	df 93       	push	r29
 a20:	cf 93       	push	r28
 a22:	00 d0       	rcall	.+0      	; 0xa24 <SSD_voidSendNumber+0x6>
 a24:	00 d0       	rcall	.+0      	; 0xa26 <SSD_voidSendNumber+0x8>
 a26:	0f 92       	push	r0
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	69 83       	std	Y+1, r22	; 0x01
 a2e:	7a 83       	std	Y+2, r23	; 0x02
 a30:	8b 83       	std	Y+3, r24	; 0x03
 a32:	9c 83       	std	Y+4, r25	; 0x04
 a34:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	88 23       	and	r24, r24
 a3a:	69 f4       	brne	.+26     	; 0xa56 <SSD_voidSendNumber+0x38>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
 a3c:	2a 81       	ldd	r18, Y+2	; 0x02
 a3e:	8d 81       	ldd	r24, Y+5	; 0x05
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	fc 01       	movw	r30, r24
 a46:	e0 5a       	subi	r30, 0xA0	; 160
 a48:	ff 4f       	sbci	r31, 0xFF	; 255
 a4a:	90 81       	ld	r25, Z
 a4c:	82 2f       	mov	r24, r18
 a4e:	69 2f       	mov	r22, r25
 a50:	0e 94 01 04 	call	0x802	; 0x802 <DIO_enumSetPortValue>
 a54:	11 c0       	rjmp	.+34     	; 0xa78 <SSD_voidSendNumber+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	71 f4       	brne	.+28     	; 0xa78 <SSD_voidSendNumber+0x5a>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
 a5c:	2a 81       	ldd	r18, Y+2	; 0x02
 a5e:	8d 81       	ldd	r24, Y+5	; 0x05
 a60:	88 2f       	mov	r24, r24
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	fc 01       	movw	r30, r24
 a66:	e0 5a       	subi	r30, 0xA0	; 160
 a68:	ff 4f       	sbci	r31, 0xFF	; 255
 a6a:	80 81       	ld	r24, Z
 a6c:	98 2f       	mov	r25, r24
 a6e:	90 95       	com	r25
 a70:	82 2f       	mov	r24, r18
 a72:	69 2f       	mov	r22, r25
 a74:	0e 94 01 04 	call	0x802	; 0x802 <DIO_enumSetPortValue>

	}

}
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	0f 90       	pop	r0
 a80:	0f 90       	pop	r0
 a82:	cf 91       	pop	r28
 a84:	df 91       	pop	r29
 a86:	08 95       	ret

00000a88 <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
 a88:	df 93       	push	r29
 a8a:	cf 93       	push	r28
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <SSD_voidEnable+0x6>
 a8e:	00 d0       	rcall	.+0      	; 0xa90 <SSD_voidEnable+0x8>
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
 a94:	69 83       	std	Y+1, r22	; 0x01
 a96:	7a 83       	std	Y+2, r23	; 0x02
 a98:	8b 83       	std	Y+3, r24	; 0x03
 a9a:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	88 23       	and	r24, r24
 aa0:	69 f4       	brne	.+26     	; 0xabc <SSD_voidEnable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
 aa2:	8b 81       	ldd	r24, Y+3	; 0x03
 aa4:	9c 81       	ldd	r25, Y+4	; 0x04
 aa6:	69 2f       	mov	r22, r25
 aa8:	41 e0       	ldi	r20, 0x01	; 1
 aaa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
 aae:	8b 81       	ldd	r24, Y+3	; 0x03
 ab0:	9c 81       	ldd	r25, Y+4	; 0x04
 ab2:	69 2f       	mov	r22, r25
 ab4:	40 e0       	ldi	r20, 0x00	; 0
 ab6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
 aba:	0f c0       	rjmp	.+30     	; 0xada <SSD_voidEnable+0x52>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	81 30       	cpi	r24, 0x01	; 1
 ac0:	61 f4       	brne	.+24     	; 0xada <SSD_voidEnable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
 ac2:	8b 81       	ldd	r24, Y+3	; 0x03
 ac4:	9c 81       	ldd	r25, Y+4	; 0x04
 ac6:	69 2f       	mov	r22, r25
 ac8:	41 e0       	ldi	r20, 0x01	; 1
 aca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_PIN_HIGH );
 ace:	8b 81       	ldd	r24, Y+3	; 0x03
 ad0:	9c 81       	ldd	r25, Y+4	; 0x04
 ad2:	69 2f       	mov	r22, r25
 ad4:	41 e0       	ldi	r20, 0x01	; 1
 ad6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>

	}

}
 ada:	0f 90       	pop	r0
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	0f 90       	pop	r0
 ae2:	cf 91       	pop	r28
 ae4:	df 91       	pop	r29
 ae6:	08 95       	ret

00000ae8 <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
 ae8:	df 93       	push	r29
 aea:	cf 93       	push	r28
 aec:	00 d0       	rcall	.+0      	; 0xaee <SSD_voidDisable+0x6>
 aee:	00 d0       	rcall	.+0      	; 0xaf0 <SSD_voidDisable+0x8>
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
 af4:	69 83       	std	Y+1, r22	; 0x01
 af6:	7a 83       	std	Y+2, r23	; 0x02
 af8:	8b 83       	std	Y+3, r24	; 0x03
 afa:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	88 23       	and	r24, r24
 b00:	69 f4       	brne	.+26     	; 0xb1c <SSD_voidDisable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
 b02:	8b 81       	ldd	r24, Y+3	; 0x03
 b04:	9c 81       	ldd	r25, Y+4	; 0x04
 b06:	69 2f       	mov	r22, r25
 b08:	41 e0       	ldi	r20, 0x01	; 1
 b0a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
 b0e:	8b 81       	ldd	r24, Y+3	; 0x03
 b10:	9c 81       	ldd	r25, Y+4	; 0x04
 b12:	69 2f       	mov	r22, r25
 b14:	41 e0       	ldi	r20, 0x01	; 1
 b16:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
 b1a:	0f c0       	rjmp	.+30     	; 0xb3a <SSD_voidDisable+0x52>

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
 b1c:	89 81       	ldd	r24, Y+1	; 0x01
 b1e:	81 30       	cpi	r24, 0x01	; 1
 b20:	61 f4       	brne	.+24     	; 0xb3a <SSD_voidDisable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
 b22:	8b 81       	ldd	r24, Y+3	; 0x03
 b24:	9c 81       	ldd	r25, Y+4	; 0x04
 b26:	69 2f       	mov	r22, r25
 b28:	41 e0       	ldi	r20, 0x01	; 1
 b2a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
 b2e:	8b 81       	ldd	r24, Y+3	; 0x03
 b30:	9c 81       	ldd	r25, Y+4	; 0x04
 b32:	69 2f       	mov	r22, r25
 b34:	40 e0       	ldi	r20, 0x00	; 0
 b36:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>

	}

}
 b3a:	0f 90       	pop	r0
 b3c:	0f 90       	pop	r0
 b3e:	0f 90       	pop	r0
 b40:	0f 90       	pop	r0
 b42:	cf 91       	pop	r28
 b44:	df 91       	pop	r29
 b46:	08 95       	ret

00000b48 <SW_voidInit>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void 
*/
void SW_voidInit      ( SW_Type SW_Config ){
 b48:	df 93       	push	r29
 b4a:	cf 93       	push	r28
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <SW_voidInit+0x6>
 b4e:	0f 92       	push	r0
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
 b54:	69 83       	std	Y+1, r22	; 0x01
 b56:	7a 83       	std	Y+2, r23	; 0x02
 b58:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
 b5c:	9a 81       	ldd	r25, Y+2	; 0x02
 b5e:	69 2f       	mov	r22, r25
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
 b66:	8b 81       	ldd	r24, Y+3	; 0x03
 b68:	88 23       	and	r24, r24
 b6a:	31 f4       	brne	.+12     	; 0xb78 <SW_voidInit+0x30>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
 b6c:	89 81       	ldd	r24, Y+1	; 0x01
 b6e:	9a 81       	ldd	r25, Y+2	; 0x02
 b70:	69 2f       	mov	r22, r25
 b72:	41 e0       	ldi	r20, 0x01	; 1
 b74:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
 b78:	0f 90       	pop	r0
 b7a:	0f 90       	pop	r0
 b7c:	0f 90       	pop	r0
 b7e:	cf 91       	pop	r28
 b80:	df 91       	pop	r29
 b82:	08 95       	ret

00000b84 <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/

u8   SW_u8GetPressed ( SW_Type SW_Config ){
 b84:	df 93       	push	r29
 b86:	cf 93       	push	r28
 b88:	00 d0       	rcall	.+0      	; 0xb8a <SW_u8GetPressed+0x6>
 b8a:	00 d0       	rcall	.+0      	; 0xb8c <SW_u8GetPressed+0x8>
 b8c:	0f 92       	push	r0
 b8e:	cd b7       	in	r28, 0x3d	; 61
 b90:	de b7       	in	r29, 0x3e	; 62
 b92:	6b 83       	std	Y+3, r22	; 0x03
 b94:	7c 83       	std	Y+4, r23	; 0x04
 b96:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
 b98:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
 b9a:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
 b9c:	8d 81       	ldd	r24, Y+5	; 0x05
 b9e:	88 23       	and	r24, r24
 ba0:	19 f0       	breq	.+6      	; 0xba8 <SW_u8GetPressed+0x24>
 ba2:	8d 81       	ldd	r24, Y+5	; 0x05
 ba4:	81 30       	cpi	r24, 0x01	; 1
 ba6:	a1 f4       	brne	.+40     	; 0xbd0 <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
 ba8:	8b 81       	ldd	r24, Y+3	; 0x03
 baa:	9c 81       	ldd	r25, Y+4	; 0x04
 bac:	9e 01       	movw	r18, r28
 bae:	2e 5f       	subi	r18, 0xFE	; 254
 bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 bb2:	69 2f       	mov	r22, r25
 bb4:	a9 01       	movw	r20, r18
 bb6:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
 bba:	8a 81       	ldd	r24, Y+2	; 0x02
 bbc:	88 23       	and	r24, r24
 bbe:	19 f4       	brne	.+6      	; 0xbc6 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
 bc0:	81 e0       	ldi	r24, 0x01	; 1
 bc2:	89 83       	std	Y+1, r24	; 0x01
 bc4:	1b c0       	rjmp	.+54     	; 0xbfc <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
 bc6:	8a 81       	ldd	r24, Y+2	; 0x02
 bc8:	81 30       	cpi	r24, 0x01	; 1
 bca:	c1 f4       	brne	.+48     	; 0xbfc <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
 bcc:	19 82       	std	Y+1, r1	; 0x01
 bce:	16 c0       	rjmp	.+44     	; 0xbfc <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
 bd0:	8d 81       	ldd	r24, Y+5	; 0x05
 bd2:	82 30       	cpi	r24, 0x02	; 2
 bd4:	99 f4       	brne	.+38     	; 0xbfc <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
 bd6:	8b 81       	ldd	r24, Y+3	; 0x03
 bd8:	9c 81       	ldd	r25, Y+4	; 0x04
 bda:	9e 01       	movw	r18, r28
 bdc:	2e 5f       	subi	r18, 0xFE	; 254
 bde:	3f 4f       	sbci	r19, 0xFF	; 255
 be0:	69 2f       	mov	r22, r25
 be2:	a9 01       	movw	r20, r18
 be4:	0e 94 67 02 	call	0x4ce	; 0x4ce <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
 be8:	8a 81       	ldd	r24, Y+2	; 0x02
 bea:	88 23       	and	r24, r24
 bec:	11 f4       	brne	.+4      	; 0xbf2 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
 bee:	19 82       	std	Y+1, r1	; 0x01
 bf0:	05 c0       	rjmp	.+10     	; 0xbfc <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
 bf2:	8a 81       	ldd	r24, Y+2	; 0x02
 bf4:	81 30       	cpi	r24, 0x01	; 1
 bf6:	11 f4       	brne	.+4      	; 0xbfc <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
 bfc:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 bfe:	0f 90       	pop	r0
 c00:	0f 90       	pop	r0
 c02:	0f 90       	pop	r0
 c04:	0f 90       	pop	r0
 c06:	0f 90       	pop	r0
 c08:	cf 91       	pop	r28
 c0a:	df 91       	pop	r29
 c0c:	08 95       	ret

00000c0e <main>:




void main (void )
{
 c0e:	df 93       	push	r29
 c10:	cf 93       	push	r28
 c12:	0f 92       	push	r0
 c14:	cd b7       	in	r28, 0x3d	; 61
 c16:	de b7       	in	r29, 0x3e	; 62

	SSD_voidInitialDataPort(SSD1) ;
 c18:	80 91 6a 00 	lds	r24, 0x006A
 c1c:	90 91 6b 00 	lds	r25, 0x006B
 c20:	a0 91 6c 00 	lds	r26, 0x006C
 c24:	b0 91 6d 00 	lds	r27, 0x006D
 c28:	bc 01       	movw	r22, r24
 c2a:	cd 01       	movw	r24, r26
 c2c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD1) ;
 c30:	80 91 6a 00 	lds	r24, 0x006A
 c34:	90 91 6b 00 	lds	r25, 0x006B
 c38:	a0 91 6c 00 	lds	r26, 0x006C
 c3c:	b0 91 6d 00 	lds	r27, 0x006D
 c40:	bc 01       	movw	r22, r24
 c42:	cd 01       	movw	r24, r26
 c44:	0e 94 44 05 	call	0xa88	; 0xa88 <SSD_voidEnable>
	SW_voidInit(SW1) ;
 c48:	60 91 6e 00 	lds	r22, 0x006E
 c4c:	70 91 6f 00 	lds	r23, 0x006F
 c50:	80 91 70 00 	lds	r24, 0x0070
 c54:	0e 94 a4 05 	call	0xb48	; 0xb48 <SW_voidInit>


	while(1)
	{

		    SSD_voidInitialDataPort(SSD1);
 c58:	80 91 6a 00 	lds	r24, 0x006A
 c5c:	90 91 6b 00 	lds	r25, 0x006B
 c60:	a0 91 6c 00 	lds	r26, 0x006C
 c64:	b0 91 6d 00 	lds	r27, 0x006D
 c68:	bc 01       	movw	r22, r24
 c6a:	cd 01       	movw	r24, r26
 c6c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <SSD_voidInitialDataPort>
			SSD_voidEnable         (SSD1);
 c70:	80 91 6a 00 	lds	r24, 0x006A
 c74:	90 91 6b 00 	lds	r25, 0x006B
 c78:	a0 91 6c 00 	lds	r26, 0x006C
 c7c:	b0 91 6d 00 	lds	r27, 0x006D
 c80:	bc 01       	movw	r22, r24
 c82:	cd 01       	movw	r24, r26
 c84:	0e 94 44 05 	call	0xa88	; 0xa88 <SSD_voidEnable>
			SW_voidInit            (SW1) ;
 c88:	60 91 6e 00 	lds	r22, 0x006E
 c8c:	70 91 6f 00 	lds	r23, 0x006F
 c90:	80 91 70 00 	lds	r24, 0x0070
 c94:	0e 94 a4 05 	call	0xb48	; 0xb48 <SW_voidInit>

			u8 count = 0;
 c98:	19 82       	std	Y+1, r1	; 0x01
 c9a:	25 c0       	rjmp	.+74     	; 0xce6 <main+0xd8>
			while (1)
			{
				while (count != 10) {

					if (SW_u8GetPressed (SW1)) {
 c9c:	60 91 6e 00 	lds	r22, 0x006E
 ca0:	70 91 6f 00 	lds	r23, 0x006F
 ca4:	80 91 70 00 	lds	r24, 0x0070
 ca8:	0e 94 c2 05 	call	0xb84	; 0xb84 <SW_u8GetPressed>
 cac:	88 23       	and	r24, r24
 cae:	d9 f0       	breq	.+54     	; 0xce6 <main+0xd8>
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <main+0xbe>

						while (SW_u8GetPressed (SW1)) {
							SSD_voidSendNumber     (SSD1, count);
 cb2:	80 91 6a 00 	lds	r24, 0x006A
 cb6:	90 91 6b 00 	lds	r25, 0x006B
 cba:	a0 91 6c 00 	lds	r26, 0x006C
 cbe:	b0 91 6d 00 	lds	r27, 0x006D
 cc2:	bc 01       	movw	r22, r24
 cc4:	cd 01       	movw	r24, r26
 cc6:	49 81       	ldd	r20, Y+1	; 0x01
 cc8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <SSD_voidSendNumber>
			{
				while (count != 10) {

					if (SW_u8GetPressed (SW1)) {

						while (SW_u8GetPressed (SW1)) {
 ccc:	60 91 6e 00 	lds	r22, 0x006E
 cd0:	70 91 6f 00 	lds	r23, 0x006F
 cd4:	80 91 70 00 	lds	r24, 0x0070
 cd8:	0e 94 c2 05 	call	0xb84	; 0xb84 <SW_u8GetPressed>
 cdc:	88 23       	and	r24, r24
 cde:	49 f7       	brne	.-46     	; 0xcb2 <main+0xa4>
							SSD_voidSendNumber     (SSD1, count);
						}

						count++;
 ce0:	89 81       	ldd	r24, Y+1	; 0x01
 ce2:	8f 5f       	subi	r24, 0xFF	; 255
 ce4:	89 83       	std	Y+1, r24	; 0x01
			SW_voidInit            (SW1) ;

			u8 count = 0;
			while (1)
			{
				while (count != 10) {
 ce6:	89 81       	ldd	r24, Y+1	; 0x01
 ce8:	8a 30       	cpi	r24, 0x0A	; 10
 cea:	c1 f6       	brne	.-80     	; 0xc9c <main+0x8e>

						count++;
					}
				}

				count = 0;
 cec:	19 82       	std	Y+1, r1	; 0x01
 cee:	fb cf       	rjmp	.-10     	; 0xce6 <main+0xd8>

00000cf0 <_exit>:
 cf0:	f8 94       	cli

00000cf2 <__stop_program>:
 cf2:	ff cf       	rjmp	.-2      	; 0xcf2 <__stop_program>
