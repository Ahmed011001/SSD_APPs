
SSD_App4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00001bee  00001c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001434  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d55  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00003f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00004254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00006263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  000073d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000083d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  00008835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000090e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <main>
      7a:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e8 59       	subi	r30, 0x98	; 152
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <DIO_enumSetPinDirection>:
 * return : its status
 */


DIO_ErrorStatus DIO_enumSetPinDirection (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	28 97       	sbiw	r28, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	8a 83       	std	Y+2, r24	; 0x02
     cdc:	6b 83       	std	Y+3, r22	; 0x03
     cde:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	89 83       	std	Y+1, r24	; 0x01
	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	08 f0       	brcs	.+2      	; 0xcec <DIO_enumSetPinDirection+0x26>
     cea:	f1 c0       	rjmp	.+482    	; 0xece <DIO_enumSetPinDirection+0x208>
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <DIO_enumSetPinDirection+0x2e>
     cf2:	ed c0       	rjmp	.+474    	; 0xece <DIO_enumSetPinDirection+0x208>
	{
		//Check on the Pin Direction
		if (Copy_u8Direction == DIO_PIN_OUTPUT)
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <DIO_enumSetPinDirection+0x36>
     cfa:	6f c0       	rjmp	.+222    	; 0xdda <DIO_enumSetPinDirection+0x114>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	38 87       	std	Y+8, r19	; 0x08
     d04:	2f 83       	std	Y+7, r18	; 0x07
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	98 85       	ldd	r25, Y+8	; 0x08
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	49 f1       	breq	.+82     	; 0xd62 <DIO_enumSetPinDirection+0x9c>
     d10:	2f 81       	ldd	r18, Y+7	; 0x07
     d12:	38 85       	ldd	r19, Y+8	; 0x08
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <DIO_enumSetPinDirection+0x5e>
     d1a:	8f 81       	ldd	r24, Y+7	; 0x07
     d1c:	98 85       	ldd	r25, Y+8	; 0x08
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	61 f0       	breq	.+24     	; 0xd3a <DIO_enumSetPinDirection+0x74>
     d22:	d6 c0       	rjmp	.+428    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
     d24:	2f 81       	ldd	r18, Y+7	; 0x07
     d26:	38 85       	ldd	r19, Y+8	; 0x08
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	71 f1       	breq	.+92     	; 0xd8a <DIO_enumSetPinDirection+0xc4>
     d2e:	8f 81       	ldd	r24, Y+7	; 0x07
     d30:	98 85       	ldd	r25, Y+8	; 0x08
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	e9 f1       	breq	.+122    	; 0xdb2 <DIO_enumSetPinDirection+0xec>
     d38:	cb c0       	rjmp	.+406    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SET_BIT(DDRA,Copy_u8PIN);break;
     d3a:	aa e3       	ldi	r26, 0x3A	; 58
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ea e3       	ldi	r30, 0x3A	; 58
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enumSetPinDirection+0x92>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_enumSetPinDirection+0x8e>
     d5c:	84 2b       	or	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	b7 c0       	rjmp	.+366    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SET_BIT(DDRB,Copy_u8PIN);break;
     d62:	a7 e3       	ldi	r26, 0x37	; 55
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enumSetPinDirection+0xba>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enumSetPinDirection+0xb6>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	a3 c0       	rjmp	.+326    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SET_BIT(DDRC,Copy_u8PIN);break;
     d8a:	a4 e3       	ldi	r26, 0x34	; 52
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e4 e3       	ldi	r30, 0x34	; 52
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_enumSetPinDirection+0xe2>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_enumSetPinDirection+0xde>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	8f c0       	rjmp	.+286    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SET_BIT(DDRD,Copy_u8PIN);break;		
     db2:	a1 e3       	ldi	r26, 0x31	; 49
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_enumSetPinDirection+0x10a>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_enumSetPinDirection+0x106>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	7b c0       	rjmp	.+246    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			}
		}
		//Check on the Pin Direction
		else if (Copy_u8Direction == DIO_PIN_INPUT)
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	88 23       	and	r24, r24
     dde:	09 f0       	breq	.+2      	; 0xde2 <DIO_enumSetPinDirection+0x11c>
     de0:	74 c0       	rjmp	.+232    	; 0xeca <DIO_enumSetPinDirection+0x204>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	3e 83       	std	Y+6, r19	; 0x06
     dea:	2d 83       	std	Y+5, r18	; 0x05
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	91 05       	cpc	r25, r1
     df4:	59 f1       	breq	.+86     	; 0xe4c <DIO_enumSetPinDirection+0x186>
     df6:	2d 81       	ldd	r18, Y+5	; 0x05
     df8:	3e 81       	ldd	r19, Y+6	; 0x06
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	2c f4       	brge	.+10     	; 0xe0a <DIO_enumSetPinDirection+0x144>
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f0       	breq	.+26     	; 0xe22 <DIO_enumSetPinDirection+0x15c>
     e08:	63 c0       	rjmp	.+198    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
     e0a:	2d 81       	ldd	r18, Y+5	; 0x05
     e0c:	3e 81       	ldd	r19, Y+6	; 0x06
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	31 05       	cpc	r19, r1
     e12:	89 f1       	breq	.+98     	; 0xe76 <DIO_enumSetPinDirection+0x1b0>
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	83 30       	cpi	r24, 0x03	; 3
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <DIO_enumSetPinDirection+0x15a>
     e1e:	40 c0       	rjmp	.+128    	; 0xea0 <DIO_enumSetPinDirection+0x1da>
     e20:	57 c0       	rjmp	.+174    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PIN);break;
     e22:	aa e3       	ldi	r26, 0x3A	; 58
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ea e3       	ldi	r30, 0x3A	; 58
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enumSetPinDirection+0x17a>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_enumSetPinDirection+0x176>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	42 c0       	rjmp	.+132    	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PIN);break;
     e4c:	a7 e3       	ldi	r26, 0x37	; 55
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e3       	ldi	r30, 0x37	; 55
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_enumSetPinDirection+0x1a4>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_enumSetPinDirection+0x1a0>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	2d c0       	rjmp	.+90     	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PIN);break;
     e76:	a4 e3       	ldi	r26, 0x34	; 52
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e4 e3       	ldi	r30, 0x34	; 52
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_enumSetPinDirection+0x1ce>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_enumSetPinDirection+0x1ca>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	18 c0       	rjmp	.+48     	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PIN);break;		
     ea0:	a1 e3       	ldi	r26, 0x31	; 49
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e1 e3       	ldi	r30, 0x31	; 49
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_enumSetPinDirection+0x1f8>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_enumSetPinDirection+0x1f4>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <DIO_enumSetPinDirection+0x20a>
			}
		}	
		else
		{
			//in case of error in the Pin ID or PORT ID
			LOC_enumState = DIO_NOK ;
     eca:	19 82       	std	Y+1, r1	; 0x01
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <DIO_enumSetPinDirection+0x20a>
		
	}
	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
     ece:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01

}
     ed2:	28 96       	adiw	r28, 0x08	; 8
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	28 97       	sbiw	r28, 0x08	; 8
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	6b 83       	std	Y+3, r22	; 0x03
     efc:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01

	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	08 f0       	brcs	.+2      	; 0xf0a <DIO_enumSetPinValue+0x26>
     f08:	f1 c0       	rjmp	.+482    	; 0x10ec <DIO_enumSetPinValue+0x208>
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	08 f0       	brcs	.+2      	; 0xf12 <DIO_enumSetPinValue+0x2e>
     f10:	ed c0       	rjmp	.+474    	; 0x10ec <DIO_enumSetPinValue+0x208>
	{
		//Check on the Pin Option Value
		if (Copy_u8Value == DIO_PIN_HIGH)
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	09 f0       	breq	.+2      	; 0xf1a <DIO_enumSetPinValue+0x36>
     f18:	6f c0       	rjmp	.+222    	; 0xff8 <DIO_enumSetPinValue+0x114>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	38 87       	std	Y+8, r19	; 0x08
     f22:	2f 83       	std	Y+7, r18	; 0x07
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
     f26:	98 85       	ldd	r25, Y+8	; 0x08
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	49 f1       	breq	.+82     	; 0xf80 <DIO_enumSetPinValue+0x9c>
     f2e:	2f 81       	ldd	r18, Y+7	; 0x07
     f30:	38 85       	ldd	r19, Y+8	; 0x08
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	2c f4       	brge	.+10     	; 0xf42 <DIO_enumSetPinValue+0x5e>
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	61 f0       	breq	.+24     	; 0xf58 <DIO_enumSetPinValue+0x74>
     f40:	d6 c0       	rjmp	.+428    	; 0x10ee <DIO_enumSetPinValue+0x20a>
     f42:	2f 81       	ldd	r18, Y+7	; 0x07
     f44:	38 85       	ldd	r19, Y+8	; 0x08
     f46:	22 30       	cpi	r18, 0x02	; 2
     f48:	31 05       	cpc	r19, r1
     f4a:	71 f1       	breq	.+92     	; 0xfa8 <DIO_enumSetPinValue+0xc4>
     f4c:	8f 81       	ldd	r24, Y+7	; 0x07
     f4e:	98 85       	ldd	r25, Y+8	; 0x08
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	91 05       	cpc	r25, r1
     f54:	e9 f1       	breq	.+122    	; 0xfd0 <DIO_enumSetPinValue+0xec>
     f56:	cb c0       	rjmp	.+406    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SET_BIT(PORTA,Copy_u8PIN);break;
     f58:	ab e3       	ldi	r26, 0x3B	; 59
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	eb e3       	ldi	r30, 0x3B	; 59
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <DIO_enumSetPinValue+0x92>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <DIO_enumSetPinValue+0x8e>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	b7 c0       	rjmp	.+366    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT(PORTB,Copy_u8PIN);break;
     f80:	a8 e3       	ldi	r26, 0x38	; 56
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e8 e3       	ldi	r30, 0x38	; 56
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_enumSetPinValue+0xba>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_enumSetPinValue+0xb6>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	a3 c0       	rjmp	.+326    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT(PORTC,Copy_u8PIN);break;
     fa8:	a5 e3       	ldi	r26, 0x35	; 53
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_enumSetPinValue+0xe2>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_enumSetPinValue+0xde>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	8f c0       	rjmp	.+286    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT(PORTD,Copy_u8PIN);break;		
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_enumSetPinValue+0x10a>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_enumSetPinValue+0x106>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	7b c0       	rjmp	.+246    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			}
		}
		//Check on the Pin Option Value
		else if (Copy_u8Value == DIO_PIN_LOW)
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	88 23       	and	r24, r24
     ffc:	09 f0       	breq	.+2      	; 0x1000 <DIO_enumSetPinValue+0x11c>
     ffe:	74 c0       	rjmp	.+232    	; 0x10e8 <DIO_enumSetPinValue+0x204>
		{
			//Check on the Required PORT Number
			switch (Copy_u8PORT)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3e 83       	std	Y+6, r19	; 0x06
    1008:	2d 83       	std	Y+5, r18	; 0x05
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	59 f1       	breq	.+86     	; 0x106a <DIO_enumSetPinValue+0x186>
    1014:	2d 81       	ldd	r18, Y+5	; 0x05
    1016:	3e 81       	ldd	r19, Y+6	; 0x06
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	2c f4       	brge	.+10     	; 0x1028 <DIO_enumSetPinValue+0x144>
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f0       	breq	.+26     	; 0x1040 <DIO_enumSetPinValue+0x15c>
    1026:	63 c0       	rjmp	.+198    	; 0x10ee <DIO_enumSetPinValue+0x20a>
    1028:	2d 81       	ldd	r18, Y+5	; 0x05
    102a:	3e 81       	ldd	r19, Y+6	; 0x06
    102c:	22 30       	cpi	r18, 0x02	; 2
    102e:	31 05       	cpc	r19, r1
    1030:	89 f1       	breq	.+98     	; 0x1094 <DIO_enumSetPinValue+0x1b0>
    1032:	8d 81       	ldd	r24, Y+5	; 0x05
    1034:	9e 81       	ldd	r25, Y+6	; 0x06
    1036:	83 30       	cpi	r24, 0x03	; 3
    1038:	91 05       	cpc	r25, r1
    103a:	09 f4       	brne	.+2      	; 0x103e <DIO_enumSetPinValue+0x15a>
    103c:	40 c0       	rjmp	.+128    	; 0x10be <DIO_enumSetPinValue+0x1da>
    103e:	57 c0       	rjmp	.+174    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PIN);break;
    1040:	ab e3       	ldi	r26, 0x3B	; 59
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	eb e3       	ldi	r30, 0x3B	; 59
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_enumSetPinValue+0x17a>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_enumSetPinValue+0x176>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	42 c0       	rjmp	.+132    	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PIN);break;
    106a:	a8 e3       	ldi	r26, 0x38	; 56
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_enumSetPinValue+0x1a4>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_enumSetPinValue+0x1a0>
    108c:	80 95       	com	r24
    108e:	84 23       	and	r24, r20
    1090:	8c 93       	st	X, r24
    1092:	2d c0       	rjmp	.+90     	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PIN);break;
    1094:	a5 e3       	ldi	r26, 0x35	; 53
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e5 e3       	ldi	r30, 0x35	; 53
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_enumSetPinValue+0x1ce>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_enumSetPinValue+0x1ca>
    10b6:	80 95       	com	r24
    10b8:	84 23       	and	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	18 c0       	rjmp	.+48     	; 0x10ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PIN);break;		
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_enumSetPinValue+0x1f8>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_enumSetPinValue+0x1f4>
    10e0:	80 95       	com	r24
    10e2:	84 23       	and	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	03 c0       	rjmp	.+6      	; 0x10ee <DIO_enumSetPinValue+0x20a>
			}
		}
		else
			{
				//in case of error in the Pin ID or PORT ID
				LOC_enumState = DIO_NOK ;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <DIO_enumSetPinValue+0x20a>
	}

	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
    10ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    10f0:	28 96       	adiw	r28, 0x08	; 8
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	27 97       	sbiw	r28, 0x07	; 7
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	8a 83       	std	Y+2, r24	; 0x02
    1118:	6b 83       	std	Y+3, r22	; 0x03
    111a:	5d 83       	std	Y+5, r21	; 0x05
    111c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01
    //Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	08 f0       	brcs	.+2      	; 0x112a <DIO_enumGetPinValue+0x28>
    1128:	a2 c0       	rjmp	.+324    	; 0x126e <DIO_enumGetPinValue+0x16c>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	08 f0       	brcs	.+2      	; 0x1132 <DIO_enumGetPinValue+0x30>
    1130:	9e c0       	rjmp	.+316    	; 0x126e <DIO_enumGetPinValue+0x16c>
	{
		//Check on the Required PORT Number
		switch (Copy_u8PORT)
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3f 83       	std	Y+7, r19	; 0x07
    113a:	2e 83       	std	Y+6, r18	; 0x06
    113c:	6e 81       	ldd	r22, Y+6	; 0x06
    113e:	7f 81       	ldd	r23, Y+7	; 0x07
    1140:	61 30       	cpi	r22, 0x01	; 1
    1142:	71 05       	cpc	r23, r1
    1144:	b9 f1       	breq	.+110    	; 0x11b4 <DIO_enumGetPinValue+0xb2>
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	9f 81       	ldd	r25, Y+7	; 0x07
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	91 05       	cpc	r25, r1
    114e:	34 f4       	brge	.+12     	; 0x115c <DIO_enumGetPinValue+0x5a>
    1150:	2e 81       	ldd	r18, Y+6	; 0x06
    1152:	3f 81       	ldd	r19, Y+7	; 0x07
    1154:	21 15       	cp	r18, r1
    1156:	31 05       	cpc	r19, r1
    1158:	71 f0       	breq	.+28     	; 0x1176 <DIO_enumGetPinValue+0x74>
    115a:	8a c0       	rjmp	.+276    	; 0x1270 <DIO_enumGetPinValue+0x16e>
    115c:	6e 81       	ldd	r22, Y+6	; 0x06
    115e:	7f 81       	ldd	r23, Y+7	; 0x07
    1160:	62 30       	cpi	r22, 0x02	; 2
    1162:	71 05       	cpc	r23, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_enumGetPinValue+0x66>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <DIO_enumGetPinValue+0xf0>
    1168:	8e 81       	ldd	r24, Y+6	; 0x06
    116a:	9f 81       	ldd	r25, Y+7	; 0x07
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <DIO_enumGetPinValue+0x72>
    1172:	5e c0       	rjmp	.+188    	; 0x1230 <DIO_enumGetPinValue+0x12e>
    1174:	7d c0       	rjmp	.+250    	; 0x1270 <DIO_enumGetPinValue+0x16e>
	    {
		case DIO_PORTA : * Copy_PtrData=GET_BIT(PINA,Copy_u8PIN);break;
    1176:	e9 e3       	ldi	r30, 0x39	; 57
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	bc 01       	movw	r22, r24
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_enumGetPinValue+0x8e>
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	2a 95       	dec	r18
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_enumGetPinValue+0x8a>
    1194:	9b 01       	movw	r18, r22
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	b9 01       	movw	r22, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_enumGetPinValue+0xa2>
    11a0:	75 95       	asr	r23
    11a2:	67 95       	ror	r22
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_enumGetPinValue+0x9e>
    11a8:	cb 01       	movw	r24, r22
    11aa:	84 23       	and	r24, r20
    11ac:	ec 81       	ldd	r30, Y+4	; 0x04
    11ae:	fd 81       	ldd	r31, Y+5	; 0x05
    11b0:	80 83       	st	Z, r24
    11b2:	5e c0       	rjmp	.+188    	; 0x1270 <DIO_enumGetPinValue+0x16e>
		case DIO_PORTB : * Copy_PtrData=GET_BIT(PINB,Copy_u8PIN);break;
    11b4:	e6 e3       	ldi	r30, 0x36	; 54
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	bc 01       	movw	r22, r24
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_enumGetPinValue+0xcc>
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	2a 95       	dec	r18
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_enumGetPinValue+0xc8>
    11d2:	9b 01       	movw	r18, r22
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	b9 01       	movw	r22, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_enumGetPinValue+0xe0>
    11de:	75 95       	asr	r23
    11e0:	67 95       	ror	r22
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_enumGetPinValue+0xdc>
    11e6:	cb 01       	movw	r24, r22
    11e8:	84 23       	and	r24, r20
    11ea:	ec 81       	ldd	r30, Y+4	; 0x04
    11ec:	fd 81       	ldd	r31, Y+5	; 0x05
    11ee:	80 83       	st	Z, r24
    11f0:	3f c0       	rjmp	.+126    	; 0x1270 <DIO_enumGetPinValue+0x16e>
		case DIO_PORTC : * Copy_PtrData=GET_BIT(PINC,Copy_u8PIN);break;
    11f2:	e3 e3       	ldi	r30, 0x33	; 51
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	bc 01       	movw	r22, r24
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_enumGetPinValue+0x10a>
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	2a 95       	dec	r18
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_enumGetPinValue+0x106>
    1210:	9b 01       	movw	r18, r22
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	b9 01       	movw	r22, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_enumGetPinValue+0x11e>
    121c:	75 95       	asr	r23
    121e:	67 95       	ror	r22
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_enumGetPinValue+0x11a>
    1224:	cb 01       	movw	r24, r22
    1226:	84 23       	and	r24, r20
    1228:	ec 81       	ldd	r30, Y+4	; 0x04
    122a:	fd 81       	ldd	r31, Y+5	; 0x05
    122c:	80 83       	st	Z, r24
    122e:	20 c0       	rjmp	.+64     	; 0x1270 <DIO_enumGetPinValue+0x16e>
		case DIO_PORTD : * Copy_PtrData=GET_BIT(PIND,Copy_u8PIN);break;		
    1230:	e0 e3       	ldi	r30, 0x30	; 48
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	bc 01       	movw	r22, r24
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_enumGetPinValue+0x148>
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	2a 95       	dec	r18
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_enumGetPinValue+0x144>
    124e:	9b 01       	movw	r18, r22
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b9 01       	movw	r22, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_enumGetPinValue+0x15c>
    125a:	75 95       	asr	r23
    125c:	67 95       	ror	r22
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_enumGetPinValue+0x158>
    1262:	cb 01       	movw	r24, r22
    1264:	84 23       	and	r24, r20
    1266:	ec 81       	ldd	r30, Y+4	; 0x04
    1268:	fd 81       	ldd	r31, Y+5	; 0x05
    126a:	80 83       	st	Z, r24
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <DIO_enumGetPinValue+0x16e>
		}
	}
	else
	{
		//in case of error in the Pin ID or PORT ID
		LOC_enumState = DIO_NOK ;
    126e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;	
    1270:	89 81       	ldd	r24, Y+1	; 0x01
}
    1272:	27 96       	adiw	r28, 0x07	; 7
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_enumTogglePinValue+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <DIO_enumTogglePinValue+0x8>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01

	//Make sure that the Port ID and Pin ID are in the valid range
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <DIO_enumTogglePinValue+0x1e>
    12a0:	73 c0       	rjmp	.+230    	; 0x1388 <DIO_enumTogglePinValue+0x104>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <DIO_enumTogglePinValue+0x26>
    12a8:	6f c0       	rjmp	.+222    	; 0x1388 <DIO_enumTogglePinValue+0x104>
	{
		//Check on the Required PORT Number
		switch (Copy_u8PORT)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	91 05       	cpc	r25, r1
    12bc:	49 f1       	breq	.+82     	; 0x1310 <DIO_enumTogglePinValue+0x8c>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <DIO_enumTogglePinValue+0x4e>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_enumTogglePinValue+0x64>
    12d0:	5c c0       	rjmp	.+184    	; 0x138a <DIO_enumTogglePinValue+0x106>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	71 f1       	breq	.+92     	; 0x1338 <DIO_enumTogglePinValue+0xb4>
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	91 05       	cpc	r25, r1
    12e4:	e9 f1       	breq	.+122    	; 0x1360 <DIO_enumTogglePinValue+0xdc>
    12e6:	51 c0       	rjmp	.+162    	; 0x138a <DIO_enumTogglePinValue+0x106>
		{
		case DIO_PORTA : TOG_BIT(PORTA,Copy_u8PIN);
    12e8:	ab e3       	ldi	r26, 0x3B	; 59
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_enumTogglePinValue+0x82>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_enumTogglePinValue+0x7e>
    130a:	84 27       	eor	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	3d c0       	rjmp	.+122    	; 0x138a <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB,Copy_u8PIN);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_enumTogglePinValue+0xaa>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_enumTogglePinValue+0xa6>
    1332:	84 27       	eor	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	29 c0       	rjmp	.+82     	; 0x138a <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC,Copy_u8PIN);
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_enumTogglePinValue+0xd2>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_enumTogglePinValue+0xce>
    135a:	84 27       	eor	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	15 c0       	rjmp	.+42     	; 0x138a <DIO_enumTogglePinValue+0x106>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD,Copy_u8PIN);
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_enumTogglePinValue+0xfa>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_enumTogglePinValue+0xf6>
    1382:	84 27       	eor	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	01 c0       	rjmp	.+2      	; 0x138a <DIO_enumTogglePinValue+0x106>

	}
	else
	{
		//in case of error in the Pin ID or PORT ID 
		LOC_enumState = DIO_NOK ;
    1388:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection  (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <DIO_enumSetPortDirection+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <DIO_enumSetPortDirection+0x8>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    
	//Make sure that the Port ID is in the valid range
	if ( (Copy_u8PORT <= DIO_PORTD) )
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	a8 f5       	brcc	.+106    	; 0x1422 <DIO_enumSetPortDirection+0x86>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9d 81       	ldd	r25, Y+5	; 0x05
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	d1 f0       	breq	.+52     	; 0x1400 <DIO_enumSetPortDirection+0x64>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <DIO_enumSetPortDirection+0x44>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <DIO_enumSetPortDirection+0x5a>
    13de:	1f c0       	rjmp	.+62     	; 0x141e <DIO_enumSetPortDirection+0x82>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	81 f0       	breq	.+32     	; 0x140a <DIO_enumSetPortDirection+0x6e>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	81 f0       	breq	.+32     	; 0x1414 <DIO_enumSetPortDirection+0x78>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <DIO_enumSetPortDirection+0x82>
		{
		case DIO_PORTA: DDRA = Copy_u8Direction; break;
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	80 83       	st	Z, r24
    13fe:	12 c0       	rjmp	.+36     	; 0x1424 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTB: DDRB = Copy_u8Direction; break;
    1400:	e7 e3       	ldi	r30, 0x37	; 55
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	80 83       	st	Z, r24
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTC: DDRC = Copy_u8Direction; break;
    140a:	e4 e3       	ldi	r30, 0x34	; 52
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	80 83       	st	Z, r24
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <DIO_enumSetPortDirection+0x88>
		case DIO_PORTD: DDRD = Copy_u8Direction; break;
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 83       	st	Z, r24
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <DIO_enumSetPortDirection+0x88>
		default       : LOC_enumState = DIO_NOK; break;
    141e:	19 82       	std	Y+1, r1	; 0x01
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
    1422:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue  (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DIO_enumSetPortValue+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DIO_enumSetPortValue+0x8>
    143e:	0f 92       	push	r0
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    
	//Make sure that the Port ID is in the valid range and the Value is Valid
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	84 30       	cpi	r24, 0x04	; 4
    1450:	a8 f5       	brcc	.+106    	; 0x14bc <DIO_enumSetPortValue+0x86>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	3d 83       	std	Y+5, r19	; 0x05
    145a:	2c 83       	std	Y+4, r18	; 0x04
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	91 05       	cpc	r25, r1
    1464:	d1 f0       	breq	.+52     	; 0x149a <DIO_enumSetPortValue+0x64>
    1466:	2c 81       	ldd	r18, Y+4	; 0x04
    1468:	3d 81       	ldd	r19, Y+5	; 0x05
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	2c f4       	brge	.+10     	; 0x147a <DIO_enumSetPortValue+0x44>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	00 97       	sbiw	r24, 0x00	; 0
    1476:	61 f0       	breq	.+24     	; 0x1490 <DIO_enumSetPortValue+0x5a>
    1478:	1f c0       	rjmp	.+62     	; 0x14b8 <DIO_enumSetPortValue+0x82>
    147a:	2c 81       	ldd	r18, Y+4	; 0x04
    147c:	3d 81       	ldd	r19, Y+5	; 0x05
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	81 f0       	breq	.+32     	; 0x14a4 <DIO_enumSetPortValue+0x6e>
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	9d 81       	ldd	r25, Y+5	; 0x05
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	91 05       	cpc	r25, r1
    148c:	81 f0       	breq	.+32     	; 0x14ae <DIO_enumSetPortValue+0x78>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <DIO_enumSetPortValue+0x82>
		{
		case DIO_PORTA: PORTA = Copy_u8Value; break;
    1490:	eb e3       	ldi	r30, 0x3B	; 59
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	80 83       	st	Z, r24
    1498:	12 c0       	rjmp	.+36     	; 0x14be <DIO_enumSetPortValue+0x88>
		case DIO_PORTB: PORTB = Copy_u8Value; break;
    149a:	e8 e3       	ldi	r30, 0x38	; 56
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	80 83       	st	Z, r24
    14a2:	0d c0       	rjmp	.+26     	; 0x14be <DIO_enumSetPortValue+0x88>
		case DIO_PORTC: PORTC = Copy_u8Value; break;
    14a4:	e5 e3       	ldi	r30, 0x35	; 53
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	80 83       	st	Z, r24
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <DIO_enumSetPortValue+0x88>
		case DIO_PORTD: PORTD = Copy_u8Value; break;
    14ae:	e2 e3       	ldi	r30, 0x32	; 50
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	80 83       	st	Z, r24
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <DIO_enumSetPortValue+0x88>
		default       : LOC_enumState = DIO_NOK; break;
    14b8:	19 82       	std	Y+1, r1	; 0x01
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
    14bc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue  ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_enumGetPortValue+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_enumGetPortValue+0x8>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <DIO_enumGetPortValue+0xa>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	7c 83       	std	Y+4, r23	; 0x04
    14e2:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	89 83       	std	Y+1, r24	; 0x01

    //Make sure that the Port ID is in the valid range
	if ( (Copy_u8PORT <= DIO_PORTD))
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	e8 f5       	brcc	.+122    	; 0x1568 <DIO_enumGetPortValue+0x98>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	2d 83       	std	Y+5, r18	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	e1 f0       	breq	.+56     	; 0x153a <DIO_enumGetPortValue+0x6a>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <DIO_enumGetPortValue+0x46>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_enumGetPortValue+0x5c>
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <DIO_enumGetPortValue+0x94>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	a1 f0       	breq	.+40     	; 0x1548 <DIO_enumGetPortValue+0x78>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_enumGetPortValue+0x86>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <DIO_enumGetPortValue+0x94>
		{
			case DIO_PORTA : *Copy_PtrData = PINA ;break ;
    152c:	e9 e3       	ldi	r30, 0x39	; 57
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	18 c0       	rjmp	.+48     	; 0x156a <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTB : *Copy_PtrData = PINB ;break ;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	11 c0       	rjmp	.+34     	; 0x156a <DIO_enumGetPortValue+0x9a>
		    case DIO_PORTC : *Copy_PtrData = PINC ;break ;
    1548:	e3 e3       	ldi	r30, 0x33	; 51
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	0a c0       	rjmp	.+20     	; 0x156a <DIO_enumGetPortValue+0x9a>
	        case DIO_PORTD : *Copy_PtrData = PIND ;break ;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	80 83       	st	Z, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <DIO_enumGetPortValue+0x9a>
		    default        : LOC_enumState = DIO_NOK; break ;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_enumGetPortValue+0x9a>
		}
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_enumTogglePortValue+0x6>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_enumTogglePortValue+0x8>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
	
    //Make sure that the Port ID is in the valid range
	if (Copy_u8PORT <= DIO_PORTD)
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_enumTogglePortValue+0x1a>
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <DIO_enumTogglePortValue+0x98>
	{
		//Check on the Required PORT Number 
		switch (Copy_u8PORT)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3c 83       	std	Y+4, r19	; 0x04
    15a0:	2b 83       	std	Y+3, r18	; 0x03
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
    15aa:	e9 f0       	breq	.+58     	; 0x15e6 <DIO_enumTogglePortValue+0x68>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <DIO_enumTogglePortValue+0x42>
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	61 f0       	breq	.+24     	; 0x15d6 <DIO_enumTogglePortValue+0x58>
    15be:	2c c0       	rjmp	.+88     	; 0x1618 <DIO_enumTogglePortValue+0x9a>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	b1 f0       	breq	.+44     	; 0x15f6 <DIO_enumTogglePortValue+0x78>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	c9 f0       	breq	.+50     	; 0x1606 <DIO_enumTogglePortValue+0x88>
    15d4:	21 c0       	rjmp	.+66     	; 0x1618 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA = ~PORTA ;break ;
    15d6:	ab e3       	ldi	r26, 0x3B	; 59
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	eb e3       	ldi	r30, 0x3B	; 59
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 95       	com	r24
    15e2:	8c 93       	st	X, r24
    15e4:	19 c0       	rjmp	.+50     	; 0x1618 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTB : PORTB = ~PORTB ;break ;
    15e6:	a8 e3       	ldi	r26, 0x38	; 56
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e3       	ldi	r30, 0x38	; 56
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 95       	com	r24
    15f2:	8c 93       	st	X, r24
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTC : PORTC = ~PORTC ;break ;
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 95       	com	r24
    1602:	8c 93       	st	X, r24
    1604:	09 c0       	rjmp	.+18     	; 0x1618 <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTD : PORTD = ~PORTD ;break ;
    1606:	a2 e3       	ldi	r26, 0x32	; 50
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e2 e3       	ldi	r30, 0x32	; 50
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	80 95       	com	r24
    1612:	8c 93       	st	X, r24
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <DIO_enumTogglePortValue+0x9a>
		}
	}
	else
	{
		//in case of error in the PORT ID 
		LOC_enumState = DIO_NOK;
    1616:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <SSD_voidInitialDataPort+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <SSD_voidInitialDataPort+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	69 83       	std	Y+1, r22	; 0x01
    1636:	7a 83       	std	Y+2, r23	; 0x02
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	6f ef       	ldi	r22, 0xFF	; 255
    1640:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_enumSetPortDirection>
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <SSD_voidSendNumber>:
/*
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <SSD_voidSendNumber+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <SSD_voidSendNumber+0x8>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	69 83       	std	Y+1, r22	; 0x01
    1662:	7a 83       	std	Y+2, r23	; 0x02
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 23       	and	r24, r24
    166e:	69 f4       	brne	.+26     	; 0x168a <SSD_voidSendNumber+0x38>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
    1670:	2a 81       	ldd	r18, Y+2	; 0x02
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	fc 01       	movw	r30, r24
    167a:	e8 59       	subi	r30, 0x98	; 152
    167c:	fe 4f       	sbci	r31, 0xFE	; 254
    167e:	90 81       	ld	r25, Z
    1680:	82 2f       	mov	r24, r18
    1682:	69 2f       	mov	r22, r25
    1684:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_enumSetPortValue>
    1688:	11 c0       	rjmp	.+34     	; 0x16ac <SSD_voidSendNumber+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	71 f4       	brne	.+28     	; 0x16ac <SSD_voidSendNumber+0x5a>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
    1690:	2a 81       	ldd	r18, Y+2	; 0x02
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	fc 01       	movw	r30, r24
    169a:	e8 59       	subi	r30, 0x98	; 152
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	80 81       	ld	r24, Z
    16a0:	98 2f       	mov	r25, r24
    16a2:	90 95       	com	r25
    16a4:	82 2f       	mov	r24, r18
    16a6:	69 2f       	mov	r22, r25
    16a8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_enumSetPortValue>

	}

}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <SSD_voidEnable+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <SSD_voidEnable+0x8>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	69 83       	std	Y+1, r22	; 0x01
    16ca:	7a 83       	std	Y+2, r23	; 0x02
    16cc:	8b 83       	std	Y+3, r24	; 0x03
    16ce:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	88 23       	and	r24, r24
    16d4:	69 f4       	brne	.+26     	; 0x16f0 <SSD_voidEnable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	69 2f       	mov	r22, r25
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	69 2f       	mov	r22, r25
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <SSD_voidEnable+0x52>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	61 f4       	brne	.+24     	; 0x170e <SSD_voidEnable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	69 2f       	mov	r22, r25
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin ,DIO_PIN_HIGH );
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	69 2f       	mov	r22, r25
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>

	}

}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <SSD_voidDisable+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <SSD_voidDisable+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	69 83       	std	Y+1, r22	; 0x01
    172a:	7a 83       	std	Y+2, r23	; 0x02
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 23       	and	r24, r24
    1734:	69 f4       	brne	.+26     	; 0x1750 <SSD_voidDisable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	69 2f       	mov	r22, r25
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	69 2f       	mov	r22, r25
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
    174e:	0f c0       	rjmp	.+30     	; 0x176e <SSD_voidDisable+0x52>

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	61 f4       	brne	.+24     	; 0x176e <SSD_voidDisable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_OUTPUT );
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	69 2f       	mov	r22, r25
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	69 2f       	mov	r22, r25
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>

	}

}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <SSD_voidMakeAnimation>:
//----------------------------------------------------------------------------------------------------------------------------
void SSD_voidMakeAnimation (SSD_Type Copy_structConfig, u8 Copy_u8Number, u8 Copy_u8Time_ms)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	a4 97       	sbiw	r28, 0x24	; 36
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	6f 8f       	std	Y+31, r22	; 0x1f
    1792:	78 a3       	std	Y+32, r23	; 0x20
    1794:	89 a3       	std	Y+33, r24	; 0x21
    1796:	9a a3       	std	Y+34, r25	; 0x22
    1798:	4b a3       	std	Y+35, r20	; 0x23
    179a:	2c a3       	std	Y+36, r18	; 0x24
	if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
    179c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    179e:	88 23       	and	r24, r24
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <SSD_voidMakeAnimation+0x28>
    17a2:	a9 c0       	rjmp	.+338    	; 0x18f6 <SSD_voidMakeAnimation+0x17a>
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_LOW);
    17a4:	89 a1       	ldd	r24, Y+33	; 0x21
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_enumSetPortValue>

		for (u8 i = 0; i < 8; ++i) {
    17ac:	1e 8e       	std	Y+30, r1	; 0x1e
    17ae:	9e c0       	rjmp	.+316    	; 0x18ec <SSD_voidMakeAnimation+0x170>
			if (Local_u8SSDNumbers[Copy_u8Number] & (1 << i)) {
    17b0:	8b a1       	ldd	r24, Y+35	; 0x23
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	fc 01       	movw	r30, r24
    17b8:	e8 59       	subi	r30, 0x98	; 152
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	80 81       	ld	r24, Z
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a9 01       	movw	r20, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <SSD_voidMakeAnimation+0x54>
    17cc:	55 95       	asr	r21
    17ce:	47 95       	ror	r20
    17d0:	8a 95       	dec	r24
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <SSD_voidMakeAnimation+0x50>
    17d4:	ca 01       	movw	r24, r20
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	90 70       	andi	r25, 0x00	; 0
    17da:	88 23       	and	r24, r24
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <SSD_voidMakeAnimation+0x64>
    17de:	83 c0       	rjmp	.+262    	; 0x18e6 <SSD_voidMakeAnimation+0x16a>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH);
    17e0:	89 a1       	ldd	r24, Y+33	; 0x21
    17e2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    17e4:	41 e0       	ldi	r20, 0x01	; 1
    17e6:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
				_delay_ms(Copy_u8Time_ms)                                                    ;
    17ea:	8c a1       	ldd	r24, Y+36	; 0x24
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	9a 8f       	std	Y+26, r25	; 0x1a
    1804:	ab 8f       	std	Y+27, r26	; 0x1b
    1806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <SSD_voidMakeAnimation+0xce>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <SSD_voidMakeAnimation+0x14c>
	else if (__tmp > 65535)
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <SSD_voidMakeAnimation+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <SSD_voidMakeAnimation+0x12e>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <SSD_voidMakeAnimation+0x11c>
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <SSD_voidMakeAnimation+0x110>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <SSD_voidMakeAnimation+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	98 89       	ldd	r25, Y+16	; 0x10
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <SSD_voidMakeAnimation+0x158>
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW) ;
    18dc:	89 a1       	ldd	r24, Y+33	; 0x21
    18de:	6e 8d       	ldd	r22, Y+30	; 0x1e
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
{
	if (Copy_structConfig.Type == SSD_COMMON_CATHODE)
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_LOW);

		for (u8 i = 0; i < 8; ++i) {
    18e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	8e 8f       	std	Y+30, r24	; 0x1e
    18ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ee:	88 30       	cpi	r24, 0x08	; 8
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <SSD_voidMakeAnimation+0x178>
    18f2:	5e cf       	rjmp	.-324    	; 0x17b0 <SSD_voidMakeAnimation+0x34>
    18f4:	ac c0       	rjmp	.+344    	; 0x1a4e <SSD_voidMakeAnimation+0x2d2>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW) ;
			}
		}
	}

	else if (Copy_structConfig.Type == SSD_COMMON_ANODE)
    18f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	09 f0       	breq	.+2      	; 0x18fe <SSD_voidMakeAnimation+0x182>
    18fc:	a8 c0       	rjmp	.+336    	; 0x1a4e <SSD_voidMakeAnimation+0x2d2>
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_HIGH);
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	6f ef       	ldi	r22, 0xFF	; 255
    1902:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DIO_enumSetPortValue>

		for (u8 i = 0; i < 8; ++i) {
    1906:	1d 8e       	std	Y+29, r1	; 0x1d
    1908:	9e c0       	rjmp	.+316    	; 0x1a46 <SSD_voidMakeAnimation+0x2ca>
			if (Local_u8SSDNumbers[Copy_u8Number] & (1 << i)) {
    190a:	8b a1       	ldd	r24, Y+35	; 0x23
    190c:	88 2f       	mov	r24, r24
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	fc 01       	movw	r30, r24
    1912:	e8 59       	subi	r30, 0x98	; 152
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <SSD_voidMakeAnimation+0x1ae>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <SSD_voidMakeAnimation+0x1aa>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	90 70       	andi	r25, 0x00	; 0
    1934:	88 23       	and	r24, r24
    1936:	09 f4       	brne	.+2      	; 0x193a <SSD_voidMakeAnimation+0x1be>
    1938:	83 c0       	rjmp	.+262    	; 0x1a40 <SSD_voidMakeAnimation+0x2c4>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_LOW);
    193a:	89 a1       	ldd	r24, Y+33	; 0x21
    193c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
				_delay_ms(Copy_u8Time_ms);                                                   ;
    1944:	8c a1       	ldd	r24, Y+36	; 0x24
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8b 87       	std	Y+11, r24	; 0x0b
    195c:	9c 87       	std	Y+12, r25	; 0x0c
    195e:	ad 87       	std	Y+13, r26	; 0x0d
    1960:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1962:	6b 85       	ldd	r22, Y+11	; 0x0b
    1964:	7c 85       	ldd	r23, Y+12	; 0x0c
    1966:	8d 85       	ldd	r24, Y+13	; 0x0d
    1968:	9e 85       	ldd	r25, Y+14	; 0x0e
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	4a ef       	ldi	r20, 0xFA	; 250
    1970:	54 e4       	ldi	r21, 0x44	; 68
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8f 83       	std	Y+7, r24	; 0x07
    197c:	98 87       	std	Y+8, r25	; 0x08
    197e:	a9 87       	std	Y+9, r26	; 0x09
    1980:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1996:	88 23       	and	r24, r24
    1998:	2c f4       	brge	.+10     	; 0x19a4 <SSD_voidMakeAnimation+0x228>
		__ticks = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <SSD_voidMakeAnimation+0x2a6>
	else if (__tmp > 65535)
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	4c f5       	brge	.+82     	; 0x1a0e <SSD_voidMakeAnimation+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19be:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e2       	ldi	r20, 0x20	; 32
    19ca:	51 e4       	ldi	r21, 0x41	; 65
    19cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <SSD_voidMakeAnimation+0x288>
    19e6:	88 ec       	ldi	r24, 0xC8	; 200
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <SSD_voidMakeAnimation+0x276>
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	8d 81       	ldd	r24, Y+5	; 0x05
    19fc:	9e 81       	ldd	r25, Y+6	; 0x06
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <SSD_voidMakeAnimation+0x26a>
    1a0c:	14 c0       	rjmp	.+40     	; 0x1a36 <SSD_voidMakeAnimation+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a10:	78 85       	ldd	r23, Y+8	; 0x08
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <SSD_voidMakeAnimation+0x2b2>
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH) ;
    1a36:	89 a1       	ldd	r24, Y+33	; 0x21
    1a38:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>

	else if (Copy_structConfig.Type == SSD_COMMON_ANODE)
	{
		DIO_enumSetPortValue     (Copy_structConfig.EnablePort, DIO_PORT_HIGH);

		for (u8 i = 0; i < 8; ++i) {
    1a40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	8d 8f       	std	Y+29, r24	; 0x1d
    1a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a48:	88 30       	cpi	r24, 0x08	; 8
    1a4a:	08 f4       	brcc	.+2      	; 0x1a4e <SSD_voidMakeAnimation+0x2d2>
    1a4c:	5e cf       	rjmp	.-324    	; 0x190a <SSD_voidMakeAnimation+0x18e>
				DIO_enumSetPinValue (Copy_structConfig.EnablePort, i, DIO_PIN_HIGH) ;
			}
		}
	}

}
    1a4e:	a4 96       	adiw	r28, 0x24	; 36
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <SW_voidInit>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void 
*/
void SW_voidInit      ( SW_Type SW_Config ){
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <SW_voidInit+0x6>
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	69 83       	std	Y+1, r22	; 0x01
    1a6e:	7a 83       	std	Y+2, r23	; 0x02
    1a70:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	69 2f       	mov	r22, r25
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <DIO_enumSetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	88 23       	and	r24, r24
    1a82:	31 f4       	brne	.+12     	; 0x1a90 <SW_voidInit+0x30>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	69 2f       	mov	r22, r25
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 72 07 	call	0xee4	; 0xee4 <DIO_enumSetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/

u8   SW_u8GetPressed ( SW_Type SW_Config ){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <SW_u8GetPressed+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <SW_u8GetPressed+0x8>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	6b 83       	std	Y+3, r22	; 0x03
    1aac:	7c 83       	std	Y+4, r23	; 0x04
    1aae:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1ab0:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	88 23       	and	r24, r24
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <SW_u8GetPressed+0x24>
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	a1 f4       	brne	.+40     	; 0x1ae8 <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	9e 01       	movw	r18, r28
    1ac6:	2e 5f       	subi	r18, 0xFE	; 254
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	69 2f       	mov	r22, r25
    1acc:	a9 01       	movw	r20, r18
    1ace:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	88 23       	and	r24, r24
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	1b c0       	rjmp	.+54     	; 0x1b14 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	c1 f4       	brne	.+48     	; 0x1b14 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	99 f4       	brne	.+38     	; 0x1b14 <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	9e 01       	movw	r18, r28
    1af4:	2e 5f       	subi	r18, 0xFE	; 254
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	69 2f       	mov	r22, r25
    1afa:	a9 01       	movw	r20, r18
    1afc:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	88 23       	and	r24, r24
    1b04:	11 f4       	brne	.+4      	; 0x1b0a <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1b06:	19 82       	std	Y+1, r1	; 0x01
    1b08:	05 c0       	rjmp	.+10     	; 0x1b14 <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	81 30       	cpi	r24, 0x01	; 1
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <main>:

SSD_Type SSD={SSD_COMMON_CATHODE,SSD_PORTC,SSD_PORTC,SSD_PIN7};


int main()
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62

	SSD_voidInitialDataPort(SSD);
    1b2e:	80 91 72 01 	lds	r24, 0x0172
    1b32:	90 91 73 01 	lds	r25, 0x0173
    1b36:	a0 91 74 01 	lds	r26, 0x0174
    1b3a:	b0 91 75 01 	lds	r27, 0x0175
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 14 0b 	call	0x1628	; 0x1628 <SSD_voidInitialDataPort>
	SSD_voidEnable         (SSD);
    1b46:	80 91 72 01 	lds	r24, 0x0172
    1b4a:	90 91 73 01 	lds	r25, 0x0173
    1b4e:	a0 91 74 01 	lds	r26, 0x0174
    1b52:	b0 91 75 01 	lds	r27, 0x0175
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <SSD_voidEnable>

		while (1)
		{
			SSD_voidMakeAnimation (SSD, 0, 200);
    1b5e:	80 91 72 01 	lds	r24, 0x0172
    1b62:	90 91 73 01 	lds	r25, 0x0173
    1b66:	a0 91 74 01 	lds	r26, 0x0174
    1b6a:	b0 91 75 01 	lds	r27, 0x0175
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	28 ec       	ldi	r18, 0xC8	; 200
    1b76:	0e 94 be 0b 	call	0x177c	; 0x177c <SSD_voidMakeAnimation>
    1b7a:	f1 cf       	rjmp	.-30     	; 0x1b5e <main+0x38>

00001b7c <__prologue_saves__>:
    1b7c:	2f 92       	push	r2
    1b7e:	3f 92       	push	r3
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	ca 1b       	sub	r28, r26
    1ba6:	db 0b       	sbc	r29, r27
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	09 94       	ijmp

00001bb4 <__epilogue_restores__>:
    1bb4:	2a 88       	ldd	r2, Y+18	; 0x12
    1bb6:	39 88       	ldd	r3, Y+17	; 0x11
    1bb8:	48 88       	ldd	r4, Y+16	; 0x10
    1bba:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bc6:	b9 84       	ldd	r11, Y+9	; 0x09
    1bc8:	c8 84       	ldd	r12, Y+8	; 0x08
    1bca:	df 80       	ldd	r13, Y+7	; 0x07
    1bcc:	ee 80       	ldd	r14, Y+6	; 0x06
    1bce:	fd 80       	ldd	r15, Y+5	; 0x05
    1bd0:	0c 81       	ldd	r16, Y+4	; 0x04
    1bd2:	1b 81       	ldd	r17, Y+3	; 0x03
    1bd4:	aa 81       	ldd	r26, Y+2	; 0x02
    1bd6:	b9 81       	ldd	r27, Y+1	; 0x01
    1bd8:	ce 0f       	add	r28, r30
    1bda:	d1 1d       	adc	r29, r1
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	ed 01       	movw	r28, r26
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
